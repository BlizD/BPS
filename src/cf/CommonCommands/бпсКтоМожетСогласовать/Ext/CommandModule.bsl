
&НаКлиенте
Процедура ОбработкаКоманды(ПараметрКоманды, ПараметрыВыполненияКоманды)
		
	БПСсылка = ПараметрКоманды;
	
	РезультатФункции = ПолучитьТекЗадачиИИсполнители(БПСсылка);
	Для каждого ТабДокумент из РезультатФункции.МассивТабличныхДокументов цикл
		ТабДокумент.Показать("Кто может согласовать");
	Конеццикла;	
	Для каждого ЭлМассиваСообщений из РезультатФункции.МассивСообщений цикл
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = ""+ЭлМассиваСообщений;
		Сообщение.Сообщить();
	Конеццикла;
КонецПроцедуры

&НаСервере
Функция ПолучитьТекЗадачиИИсполнители(БПСсылка)  
	МассивСообщений = Новый Массив();
	МассивТабличныхДокументов = Новый Массив();
	
	Если БПСсылка.Стартован
		И НЕ БПСсылка.Завершен Тогда
	
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	бпсЗадача.Ссылка КАК Задача,
		|	бпсЗадача.БизнесПроцесс,
		|	бпсЗадача.Пользователь,
		|	бпсЗадача.РольАдресации,
		|	бпсЗадача.ПодразделениеАдресации
		|ИЗ
		|	Задача.бпсЗадача КАК бпсЗадача
		|ГДЕ
		|	бпсЗадача.БизнесПроцесс = &БПСсылка
		|	И НЕ бпсЗадача.Выполнена";
		
		Запрос.УстановитьПараметр("БПСсылка", БПСсылка);
		
		РезультатЗапроса = Запрос.Выполнить();
		Если РезультатЗапроса.Пустой() Тогда
			МассивСообщений.Добавить("Не удалось получить не выполненные задачи для " + БПСсылка);
		Иначе
			Выборка = РезультатЗапроса.Выбрать();
			
			Пока Выборка.Следующий() Цикл
				ДопПараметры = Новый Структура();
				ДопПараметры.Вставить("Пользователь",Выборка.Пользователь);
				ДопПараметры.Вставить("РольАдресации",Выборка.РольАдресации);
				ДопПараметры.Вставить("ПодразделениеАдресации",Выборка.ПодразделениеАдресации);
				ТЗИсполнителейЗадачи = Задачи.бпсЗадача.ПолучитьТЗИсполнителейЗадачи(ДопПараметры);
				Если ТЗИсполнителейЗадачи.Количество() = 0 Тогда
					МассивСообщений.Добавить("Не удалось получить текущую задачу и ее "
						+"исполнителей. Проверьте правильность заполнения регистра адресации.");
				Иначе
					ТабДокумент = Неопределено;		
					ТабДокумент = ПолучитьТабДокументДляЗадачи(Выборка.Задача,ТЗИсполнителейЗадачи,БПСсылка);	
					МассивТабличныхДокументов.Добавить(ТабДокумент);
				Конецесли;
			КонецЦикла;
		Конецесли;
	Конецесли;
	Если НЕ БПСсылка.Стартован Тогда
		МассивСообщений.Добавить("Бизнес процесс еще не стартован, нет текущей задачи и исполнителя");
	Конецесли;		
	Если БПСсылка.Завершен Тогда
		МассивСообщений.Добавить("Бизнес процесс уже завершен, нет текущей задачи и исполнителя");
	Конецесли;
	
	РезультатФункции = Новый Структура();
	РезультатФункции.Вставить("МассивТабличныхДокументов",МассивТабличныхДокументов);
	РезультатФункции.Вставить("МассивСообщений",МассивСообщений);
	Возврат РезультатФункции;
КонецФункции 

&НаСервере
Функция ПолучитьТабДокументДляЗадачи(пЗадача,ТЗИсполнителейЗадачи,БПСсылка) 
	ТабДокумент = Неопределено;	
	
	Макет = ПолучитьОбщийМакет("бпсКтоМожетСогласовать");
	ТабДокумент = Новый ТабличныйДокумент;
	
	ОбластьМакета = Макет.ПолучитьОбласть("Шапка");
	Если пЗадача.ТочкаМаршрута = ПредопределенноеЗначение("БизнесПроцесс.бпсСогласование.ТочкаМаршрута.ОбработатьРезультатыСогласования") Тогда
		ТекстЗаголовка = "[" + БПСсылка.ОбъектБД + "] возвращен на доработку исполнителю:";
	Иначе
		ТекстЗаголовка = "Кто может согласовать: [" + БПСсылка.ОбъектБД + "]";		
	Конецесли;
	ОбластьМакета.Параметры.Заголовок = ТекстЗаголовка;
	ТабДокумент.Вывести(ОбластьМакета);
	
	Для Каждого СтрокаТЗИсполнителейЗадачи из ТЗИсполнителейЗадачи Цикл
		ОбластьМакета = Макет.ПолучитьОбласть("Строка");
		ОбластьМакета.Параметры.Заполнить(СтрокаТЗИсполнителейЗадачи);
		ОбластьМакета.Параметры.Задача = пЗадача;
		ТабДокумент.Вывести(ОбластьМакета);
	КонецЦикла;
	
	ТабДокумент.ОтображатьЗаголовки = Ложь;
	ТабДокумент.ОтображатьСетку = Ложь;
	ТабДокумент.ТолькоПросмотр = Истина;	
	Возврат ТабДокумент;
КонецФункции 


