Процедура бпсПередЗаписьюСправочниковПередЗаписью(Источник, Отказ) Экспорт
	ПроверитьНетЛиОбъектовКоторыеТребуетсяСогласоватьПередИспользованием(Источник, Отказ);
	РегистрыСведений.бпсЗаблокированныеОбъекты.ПроверитьЗаблокированОбъект(Источник.Ссылка,Источник.ДополнительныеСвойства,Отказ);
КонецПроцедуры

Процедура бпсПередЗаписьюДокументовПередЗаписью(Источник, Отказ, РежимЗаписи, РежимПроведения) Экспорт
	ПроверитьНетЛиОбъектовКоторыеТребуетсяСогласоватьПередИспользованием(Источник, Отказ);
	ПроверитьМожноЛиПроводитьДокумент(Источник, Отказ, РежимЗаписи, РежимПроведения);
	РегистрыСведений.бпсЗаблокированныеОбъекты.ПроверитьЗаблокированОбъект(Источник.Ссылка,Источник.ДополнительныеСвойства,Отказ);	
КонецПроцедуры

Процедура ПроверитьНетЛиОбъектовКоторыеТребуетсяСогласоватьПередИспользованием(Источник, Отказ)
	ТЗДанныеДляПроверки = ПолучитьТЗДанныеДляПроверки(Источник);
	#Если Тромбон тогда
		Источник = Документы._ЗаявкаНаОплату.СоздатьДокумент();
	#Конецесли
	
	МассивОбъектовБДКоторыеИсключаемИзПроверки = Новый Массив();
	МассивОбъектовБДКоторыеИсключаемИзПроверки.Добавить(Тип("ДокументОбъект.бпсРегистрацияСтатусаОбъекта"));
	МассивОбъектовБДКоторыеИсключаемИзПроверки.Добавить(Тип("СправочникОбъект.бпсПодразделенияАдресации"));
	МассивОбъектовБДКоторыеИсключаемИзПроверки.Добавить(Тип("СправочникОбъект.бпсПредметыСогласований"));
	МассивОбъектовБДКоторыеИсключаемИзПроверки.Добавить(Тип("СправочникОбъект.бпсРолиАдресации"));
	МассивОбъектовБДКоторыеИсключаемИзПроверки.Добавить(Тип("СправочникОбъект.бпсСтатусыОбъектов"));
	МассивОбъектовБДКоторыеИсключаемИзПроверки.Добавить(Тип("СправочникОбъект.бпсТипыОбъектовБД"));
	МассивОбъектовБДКоторыеИсключаемИзПроверки.Добавить(Тип("СправочникОбъект.бпсУсловия"));
	МассивОбъектовБДКоторыеИсключаемИзПроверки.Добавить(Тип("БизнесПроцессОбъект.бпсСогласование"));
	МассивОбъектовБДКоторыеИсключаемИзПроверки.Добавить(Тип("ЗадачаОбъект.бпсЗадача"));
	
	ТипЗнчИсточник = ТипЗнч(Источник);
	Если МассивОбъектовБДКоторыеИсключаемИзПроверки.Найти(ТипЗнчИсточник) <> Неопределено Тогда
		Возврат;
	Конецесли;
	
	ЕстьРеквизитыКоторыеТребуетсяСогласовать = Ложь;
	Для каждого СтрокаТЗДанныеДляПроверки из ТЗДанныеДляПроверки цикл
		ТЗРеквизитыДляПроверки = СтрокаТЗДанныеДляПроверки.ТЗРеквизитыДляПроверки;
		Если ТЗРеквизитыДляПроверки.Количество() > 0  Тогда
			ЕстьРеквизитыКоторыеТребуетсяСогласовать = Истина;
			Прервать;
		Конецесли;
	Конеццикла;
	
	Если НЕ ЕстьРеквизитыКоторыеТребуетсяСогласовать Тогда
		Возврат;
	Конецесли;
	
	ТЗДанныеДляПроверки.Колонки.Добавить("МассивСсылокДляПроверки");
	Для каждого СтрокаТЗДанныеДляПроверки из ТЗДанныеДляПроверки цикл
		ТЗРеквизитыДляПроверки = СтрокаТЗДанныеДляПроверки.ТЗРеквизитыДляПроверки;
		МассивСсылокДляПроверки = Новый Массив();
		Для каждого СтрокаТЗРеквизитыДляПроверки из ТЗРеквизитыДляПроверки цикл
			ИмяТЧ = СтрокаТЗРеквизитыДляПроверки.ИмяТЧ;
			ИмяРеквизита = СтрокаТЗРеквизитыДляПроверки.ИмяРеквизита;
			ТипКоторыйТребуетсяСогласовать = СтрокаТЗРеквизитыДляПроверки.ТипКоторыйТребуетсяСогласовать;
			
			Если ЗначениеЗаполнено(ИмяТЧ) Тогда
				ТЧОъектаБД = Источник[ИмяТЧ];
				Для каждого СтрокаТЧОъектаБД из ТЧОъектаБД цикл
					ЗначениеРеквизита = СтрокаТЧОъектаБД[ИмяРеквизита];
					Если ТипЗнч(ЗначениеРеквизита) = ТипКоторыйТребуетсяСогласовать
						И ЗначениеЗаполнено(ЗначениеРеквизита) Тогда
						МассивСсылокДляПроверки.Добавить(ЗначениеРеквизита);
					Конецесли;
				Конеццикла;
			Иначе
				ЗначениеРеквизита = Источник[ИмяРеквизита];
				
				Если НЕ ЗначениеЗаполнено(ЗначениеРеквизита) Тогда
					Продолжить;
				Конецесли;
				
				Если ТипЗнч(ЗначениеРеквизита) = ТипКоторыйТребуетсяСогласовать Тогда
					МассивСсылокДляПроверки.Добавить(ЗначениеРеквизита);
				Конецесли;
			Конецесли;
		Конеццикла;
		СтрокаТЗДанныеДляПроверки.МассивСсылокДляПроверки = МассивСсылокДляПроверки;
	Конеццикла;	
	
	ЕстьСсылкиДляПроверки = Ложь;
	МассивСсылок = Новый Массив();
	Для каждого СтрокаТЗДанныеДляПроверки из ТЗДанныеДляПроверки цикл
		МассивСсылокДляПроверки = СтрокаТЗДанныеДляПроверки.МассивСсылокДляПроверки;
		Для каждого ЭлМассиваСсылокДляПроверки из МассивСсылокДляПроверки цикл
			ЕстьСсылкиДляПроверки = Истина;
			МассивСсылок.Добавить(ЭлМассиваСсылокДляПроверки);
		Конеццикла;
	Конеццикла;
	
	Если НЕ ЕстьСсылкиДляПроверки Тогда
		Возврат;
	Конецесли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	бпсСтатусыОбъектовСрезПоследних.ОбъектБД,
	|	бпсСтатусыОбъектовСрезПоследних.ПредметСогласования,
	|	бпсСтатусыОбъектовСрезПоследних.Статус
	|ИЗ
	|	РегистрСведений.бпсСтатусыОбъектов.СрезПоследних(
	|			,
	|			ОбъектБД В (&МассивСсылок)
	|				И ПредметСогласования.ЗапретитьИспользованиеОбъектаБДПокаОнНеСогласован) КАК бпсСтатусыОбъектовСрезПоследних
	|";
	
	Запрос.УстановитьПараметр("МассивСсылок", МассивСсылок);
	
	ТЗСтатусыОбъектов = Запрос.Выполнить().Выгрузить();
	Согласование_Утверждено = ПредопределенноеЗначение("Справочник.бпсСтатусыОбъектов.Согласование_Утверждено");
	
	Для каждого СтрокаТЗДанныеДляПроверки из ТЗДанныеДляПроверки цикл
		пПредметСогласования = СтрокаТЗДанныеДляПроверки.ПредметСогласования;
		МассивСсылокДляПроверки = СтрокаТЗДанныеДляПроверки.МассивСсылокДляПроверки;
		Для каждого ЭлМассиваСсылокДляПроверки из МассивСсылокДляПроверки цикл
		    пОбъектБД = ЭлМассиваСсылокДляПроверки;
			
			ПараметрыОтбора=Новый Структура();
			ПараметрыОтбора.Вставить("ПредметСогласования",пПредметСогласования);
			ПараметрыОтбора.Вставить("Статус",Согласование_Утверждено);
			ПараметрыОтбора.Вставить("ОбъектБД",пОбъектБД);
			НайденныеСтроки = ТЗСтатусыОбъектов.НайтиСтроки(ПараметрыОтбора);			
			Если НайденныеСтроки.Количество() = 0 Тогда
				Отказ = Истина;
				Сообщить("Ошибка! запрещено использовать объект ["+пОбъектБД+"]"
					+ ", пока он не согласован для предмета согласования ["+пПредметСогласования+"]");
			Конецесли;
		Конеццикла;
	Конеццикла;
	
КонецПроцедуры 

Процедура ЗаполнитьТЗРеквизитыДляПроверки(Источник,ТЗДанныеДляПроверки) 
	ТЗДанныеДляПроверки.Колонки.Добавить("ТЗРеквизитыДляПроверки");
	Для каждого СтрокаТЗДанныеДляПроверки из ТЗДанныеДляПроверки цикл
		ТипКоторыйТребуетсяСогласовать = СтрокаТЗДанныеДляПроверки.ТипКоторыйТребуетсяСогласовать;
		
		ТЗРеквизитыДляПроверки = Новый ТаблицаЗначений();
		ТЗРеквизитыДляПроверки.Колонки.Добавить("ИмяРеквизита");
		ТЗРеквизитыДляПроверки.Колонки.Добавить("ИмяТЧ");
		ТЗРеквизитыДляПроверки.Колонки.Добавить("ТипКоторыйТребуетсяСогласовать");		
		
		МетаданныеОбъекта = Источник.Метаданные();
		Реквизиты = МетаданныеОбъекта.Реквизиты;
		Для каждого Реквизит из Реквизиты цикл
			Если Реквизит.Тип.СодержитТип(ТипКоторыйТребуетсяСогласовать) Тогда
				ДобавитьВТЗРеквизитыДляПроверки(Неопределено,Реквизит.Имя,ТипКоторыйТребуетсяСогласовать,ТЗРеквизитыДляПроверки);
			Конецесли;
		Конеццикла;
		
		ТабличныеЧасти = МетаданныеОбъекта.ТабличныеЧасти;
		Для каждого ТабличнаяЧасть из ТабличныеЧасти цикл
			РеквизитыТЧ = ТабличнаяЧасть.Реквизиты;	
			Для каждого РеквизитТЧ из РеквизитыТЧ цикл
				Если РеквизитТЧ.Тип.СодержитТип(ТипКоторыйТребуетсяСогласовать) Тогда
					ДобавитьВТЗРеквизитыДляПроверки(ТабличнаяЧасть.Имя,РеквизитТЧ.Имя,ТипКоторыйТребуетсяСогласовать,ТЗРеквизитыДляПроверки);
				Конецесли;
			Конеццикла;
		Конеццикла;
		СтрокаТЗДанныеДляПроверки.ТЗРеквизитыДляПроверки = ТЗРеквизитыДляПроверки;
	Конеццикла;
КонецПроцедуры

Процедура ДобавитьВТЗРеквизитыДляПроверки(ИмяТЧ,ИмяРеквизита,ТипКоторыйТребуетсяСогласовать,ТЗРеквизитыДляПроверки)
	СтрокаТЗРеквизитыДляПроверки = ТЗРеквизитыДляПроверки.Добавить();
	СтрокаТЗРеквизитыДляПроверки.ИмяТЧ = ИмяТЧ;
	СтрокаТЗРеквизитыДляПроверки.ИмяРеквизита = ИмяРеквизита;
	СтрокаТЗРеквизитыДляПроверки.ТипКоторыйТребуетсяСогласовать = ТипКоторыйТребуетсяСогласовать;
КонецПроцедуры 

Функция ПолучитьТЗДанныеДляПроверки(Источник); 
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	бпсПредметыСогласований.Ссылка КАК ПредметСогласования,
	|	бпсПредметыСогласований.ТипОбъектаБД,
	|	бпсПредметыСогласований.ТипОбъектаБД.МенеджерОбъекта КАК МенеджерОбъекта,
	|	бпсПредметыСогласований.ТипОбъектаБД.ОбъектБДИмяМетаданных КАК ОбъектБДИмяМетаданных,
	|	бпсПредметыСогласований.ТипОбъектаБД.МенеджерОбъектаДляЗапроса КАК МенеджерОбъектаДляЗапроса
	|ИЗ
	|	Справочник.бпсПредметыСогласований КАК бпсПредметыСогласований
	|ГДЕ
	|	бпсПредметыСогласований.ЗапретитьИспользованиеОбъектаБДПокаОнНеСогласован";
	
	ТЗДанныеДляПроверки = Запрос.Выполнить().Выгрузить();
	ТЗДанныеДляПроверки.Колонки.Добавить("ТипКоторыйТребуетсяСогласовать");
	Для каждого СтрокаТЗДанныеДляПроверки из ТЗДанныеДляПроверки цикл
		ТипКоторыйТребуетсяСогласовать = Тип(""+СтрокаТЗДанныеДляПроверки.МенеджерОбъектаДляЗапроса+"Ссылка."+СтрокаТЗДанныеДляПроверки.ОбъектБДИмяМетаданных);
		СтрокаТЗДанныеДляПроверки.ТипКоторыйТребуетсяСогласовать = ТипКоторыйТребуетсяСогласовать;
	Конеццикла;
	
	ЗаполнитьТЗРеквизитыДляПроверки(Источник,ТЗДанныеДляПроверки);
	
	Возврат ТЗДанныеДляПроверки;
	
КонецФункции 

Процедура ПроверитьМожноЛиПроводитьДокумент(Источник, Отказ, РежимЗаписи, РежимПроведения)
	Если Отказ Тогда
		Возврат;
	Конецесли;
	Если РежимЗаписи <> РежимЗаписиДокумента.Проведение Тогда
		Возврат;
	Конецесли;
	ОбъектБД = Источник.Ссылка;
	ТипОбъектаБД = Справочники.бпсТипыОбъектовБД.ПолучитьТипОбъектаБД(ОбъектБД);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	бпсПредметыСогласований.Ссылка КАК ПредметСогласования,
	|	бпсПредметыСогласований.ТипОбъектаБД,
	|	бпсПредметыСогласований.ЗапретитьПроведениеОбъектаБДПокаОнНеСогласован
	|ПОМЕСТИТЬ ВТПредметыСогласования
	|ИЗ
	|	Справочник.бпсПредметыСогласований КАК бпсПредметыСогласований
	|ГДЕ
	|	бпсПредметыСогласований.ТипОбъектаБД = &ТипОбъектаБД
	|	И бпсПредметыСогласований.ЗапретитьПроведениеОбъектаБДПокаОнНеСогласован
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	бпсСтатусыОбъектовСрезПоследних.ОбъектБД,
	|	бпсСтатусыОбъектовСрезПоследних.ПредметСогласования,
	|	бпсСтатусыОбъектовСрезПоследних.Статус
	|ПОМЕСТИТЬ ВТСтатусыОбъектов
	|ИЗ
	|	РегистрСведений.бпсСтатусыОбъектов.СрезПоследних(
	|			,
	|			ОбъектБД = &ОбъектБД
	|				И ПредметСогласования В
	|					(ВЫБРАТЬ
	|						ВТПредметыСогласования.ПредметСогласования
	|					ИЗ
	|						ВТПредметыСогласования)) КАК бпсСтатусыОбъектовСрезПоследних
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТПредметыСогласования.ПредметСогласования,
	|	ВТПредметыСогласования.ТипОбъектаБД,
	|	ВТПредметыСогласования.ЗапретитьПроведениеОбъектаБДПокаОнНеСогласован,
	|	ВТСтатусыОбъектов.ОбъектБД,
	|	ЕСТЬNULL(ВТСтатусыОбъектов.Статус, ЗНАЧЕНИЕ(Справочник.бпсСтатусыОбъектов.ПустаяСсылка)) КАК Статус
	|ИЗ
	|	ВТПредметыСогласования КАК ВТПредметыСогласования
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСтатусыОбъектов КАК ВТСтатусыОбъектов
	|		ПО ВТПредметыСогласования.ПредметСогласования = ВТСтатусыОбъектов.ПредметСогласования
	|ГДЕ
	|	ЕСТЬNULL(ВТСтатусыОбъектов.Статус, ЗНАЧЕНИЕ(Справочник.бпсСтатусыОбъектов.ПустаяСсылка)) <> ЗНАЧЕНИЕ(Справочник.бпсСтатусыОбъектов.Согласование_Утверждено)";
	
	Запрос.УстановитьПараметр("ОбъектБД", ОбъектБД);
	Запрос.УстановитьПараметр("ТипОбъектаБД", ТипОбъектаБД);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	Конецесли;
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		Отказ = Истина;
		Сообщить("Ошибка! запрещено проводить документ, пока он не согласован для предмета согласования ["+Выборка.ПредметСогласования+"]");		
	КонецЦикла;
КонецПроцедуры 

Функция ОтправитьПочтовоеСообщение(Знач УчетнаяЗапись,
	                               Знач ПараметрыПисьма,
	                               Знач Соединение = Неопределено) Экспорт
								   
								   
	Если ТипЗнч(УчетнаяЗапись) <> Тип("СправочникСсылка.бпсУчетныеЗаписиЭлектроннойПочты")
		Или НЕ ЗначениеЗаполнено(УчетнаяЗапись) Тогда
		ВызватьИсключение НСтр("ru = 'Учетная запись не заполнена или заполнена неправильно.'");
	КонецЕсли;
	
	Если ПараметрыПисьма = Неопределено Тогда
		ВызватьИсключение НСтр("ru = 'Не заданы параметры отправки.'");
	КонецЕсли;
	
	ТипЗнчКому = ?(ПараметрыПисьма.Свойство("Кому"), ТипЗнч(ПараметрыПисьма.Кому), Неопределено);
	ТипЗнчКопии = ?(ПараметрыПисьма.Свойство("Копии"), ТипЗнч(ПараметрыПисьма.Копии), Неопределено);
	ТипЗнчСлепыеКопии = ?(ПараметрыПисьма.Свойство("СлепыеКопии"), ТипЗнч(ПараметрыПисьма.СлепыеКопии), Неопределено);
	
	Если ТипЗнчКому = Неопределено И ТипЗнчКопии = Неопределено И ТипЗнчСлепыеКопии = Неопределено Тогда
		ВызватьИсключение НСтр("ru = 'Не указано ни одного получателя.'");
	КонецЕсли;
	
	Если ТипЗнчКому = Тип("Строка") Тогда
		ПараметрыПисьма.Кому = РазобратьСтрокуСПочтовымиАдресами(ПараметрыПисьма.Кому);
	ИначеЕсли ТипЗнчКому <> Тип("Массив") Тогда
		ПараметрыПисьма.Вставить("Кому", Новый Массив);
	КонецЕсли;
	
	Если ТипЗнчКопии = Тип("Строка") Тогда
		ПараметрыПисьма.Копии = РазобратьСтрокуСПочтовымиАдресами(ПараметрыПисьма.Копии);
	ИначеЕсли ТипЗнчКопии <> Тип("Массив") Тогда
		ПараметрыПисьма.Вставить("Копии", Новый Массив);
	КонецЕсли;
	
	Если ТипЗнчСлепыеКопии = Тип("Строка") Тогда
		ПараметрыПисьма.СлепыеКопии = РазобратьСтрокуСПочтовымиАдресами(ПараметрыПисьма.СлепыеКопии);
	ИначеЕсли ТипЗнчСлепыеКопии <> Тип("Массив") Тогда
		ПараметрыПисьма.Вставить("СлепыеКопии", Новый Массив);
	КонецЕсли;
	
	Если ПараметрыПисьма.Свойство("АдресОтвета") И ТипЗнч(ПараметрыПисьма.АдресОтвета) = Тип("Строка") Тогда
		ПараметрыПисьма.АдресОтвета = РазобратьСтрокуСПочтовымиАдресами(ПараметрыПисьма.АдресОтвета);
	КонецЕсли;
	
	Если ПараметрыПисьма.Свойство("Вложения") Тогда
		Если ТипЗнч(ПараметрыПисьма.Вложения) = Тип("Соответствие") Тогда
			Для Каждого Вложение Из ПараметрыПисьма.Вложения Цикл
				ДанныеВложения = Вложение.Значение;
				Если ПривестиВложениеДляВставкиВПисьмо(ДанныеВложения) Тогда
					ПараметрыПисьма.Вложения.Вставить(Вложение.Ключ, ДанныеВложения);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	ИдентификаторСообщения = ОтправитьСообщение(УчетнаяЗапись, ПараметрыПисьма, Соединение);
	
	Возврат ИдентификаторСообщения;
	
КонецФункции


Функция ПривестиВложениеДляВставкиВПисьмо(Вложение) Экспорт
	Если ТипЗнч(Вложение) = Тип("Строка") И ЭтоАдресВременногоХранилища(Вложение) Тогда
		Вложение = ПолучитьИзВременногоХранилища(Вложение);
		ПривестиВложениеДляВставкиВПисьмо(Вложение);
		Возврат Истина;
	ИначеЕсли ТипЗнч(Вложение) = Тип("Картинка") Тогда
		Вложение = Вложение.ПолучитьДвоичныеДанные();
		Возврат Истина;
	ИначеЕсли ТипЗнч(Вложение) = Тип("Файл") И Вложение.Существует() И Вложение.ЭтоФайл() Тогда
		Вложение = Новый ДвоичныеДанные(Вложение.ПолноеИмя);
		Возврат Истина;
	КонецЕсли;
	Возврат Ложь;
КонецФункции

Функция РазобратьСтрокуСПочтовымиАдресами(Знач СтрокаПереданныхАдресов, ВызыватьИсключение = Истина) Экспорт
	
	Результат = Новый Массив;
	
	НедопустимыеСимволы = "!#$%^&*()+`~|\/=";
	
	СообщениеНедопустимыеСимволы = НСтр("ru = 'Недопустимый символ ""%1"" в адресе электронной почты ""%2""'");
	СообщениеНеверныйФорматПочтовогоАдреса = НСтр("ru = 'Некорректный адрес электронной почты ""%1""'");
	
	СтрокаПереданныхАдресов = СтрЗаменить(СтрокаПереданныхАдресов, ",", ";");
	МассивПодстрокКОбработке = бпсСтрРазделить(СокрЛП(СтрокаПереданныхАдресов), ";", Ложь);
	
	Для Каждого СтрокаАдреса Из МассивПодстрокКОбработке Цикл
		
		Индекс = 1;               // Номер обрабатываемого символа.
		Накопитель = "";          // Накопитель символов, после анализа перемещается либо в полное имя
		// либо в почтовый адрес.
		ПолноеИмяАдресата = "";   // Переменная, накапливающая имя адресата.
		ПочтовыйАдрес = "";       // Переменная, накапливающая e-mail адрес
		// 1 - формирование полного имени: ожидаются любые допустимые символы имени адресата
		// 2 - формирование почтового адреса: ожидаются любые допустимые символы email адреса
		// 3 - завершение формирования очередного почтового адреса - ожидаются символы разделители либо пробелы.
		СтадияРазбора = 1; 
		
		Пока Индекс <= СтрДлина(СтрокаАдреса) Цикл
			
			Символ = Сред(СтрокаАдреса, Индекс, 1);
			
			Если      Символ = " " Тогда
				Индекс = ? ((ПропуститьПробелы(СтрокаАдреса, Индекс, " ") - 1) > Индекс,
				ПропуститьПробелы(СтрокаАдреса, Индекс, " ") - 1,
				Индекс);
				Если      СтадияРазбора = 1 Тогда
					ПолноеИмяАдресата = ПолноеИмяАдресата + Накопитель + " ";
				ИначеЕсли СтадияРазбора = 2 Тогда
					ПочтовыйАдрес = Накопитель;
					СтадияРазбора = 3;
				КонецЕсли;
				Накопитель = "";
			ИначеЕсли Символ = "@" Тогда
				Если      СтадияРазбора = 1 Тогда
					СтадияРазбора = 2;
					
					Для ИндексПоискаНС = 1 По СтрДлина(Накопитель) Цикл
						Если бпсСтрНайти(НедопустимыеСимволы, Сред(Накопитель, ИндексПоискаНС, 1)) > 0 И ВызыватьИсключение Тогда
							ВызватьИсключение ПодставитьПараметрыВСтроку(СообщениеНедопустимыеСимволы,
								Сред(Накопитель, ИндексПоискаНС, 1),СтрокаАдреса);
						КонецЕсли;
					КонецЦикла;
					
					Накопитель = Накопитель + Символ;
				ИначеЕсли СтадияРазбора = 2 И ВызыватьИсключение Тогда
					ВызватьИсключение ПодставитьПараметрыВСтроку(СообщениеНеверныйФорматПочтовогоАдреса,СтрокаАдреса);
				ИначеЕсли СтадияРазбора = 3 И ВызыватьИсключение Тогда
					ВызватьИсключение ПодставитьПараметрыВСтроку(СообщениеНеверныйФорматПочтовогоАдреса,СтрокаАдреса);
				КонецЕсли;
			Иначе
				Если СтадияРазбора = 2 ИЛИ СтадияРазбора = 3 Тогда
					Если бпсСтрНайти(НедопустимыеСимволы, Символ) > 0 И ВызыватьИсключение Тогда
						ВызватьИсключение ПодставитьПараметрыВСтроку(СообщениеНедопустимыеСимволы,Символ,СтрокаАдреса);
					КонецЕсли;
				КонецЕсли;
				
				Накопитель = Накопитель + Символ;
			КонецЕсли;
			
			Индекс = Индекс + 1;
		КонецЦикла;
		
		Если      СтадияРазбора = 1 Тогда
			ПолноеИмяАдресата = ПолноеИмяАдресата + Накопитель;
		ИначеЕсли СтадияРазбора = 2 Тогда
			ПочтовыйАдрес = Накопитель;
		КонецЕсли;
		
		Если ПустаяСтрока(ПочтовыйАдрес) И (Не ПустаяСтрока(ПолноеИмяАдресата)) И ВызыватьИсключение Тогда
			ВызватьИсключение ПодставитьПараметрыВСтроку(СообщениеНеверныйФорматПочтовогоАдреса, ПолноеИмяАдресата);
		ИначеЕсли СтрЧислоВхождений(ПочтовыйАдрес, "@") <> 1 И ВызыватьИсключение Тогда 
			ВызватьИсключение ПодставитьПараметрыВСтроку(СообщениеНеверныйФорматПочтовогоАдреса,ПочтовыйАдрес);
		КонецЕсли;
		
		Если НЕ (ПустаяСтрока(ПолноеИмяАдресата) И ПустаяСтрока(ПочтовыйАдрес)) Тогда
			Результат.Добавить(ПроверитьИПодготовитьПочтовыйАдрес(ПолноеИмяАдресата, ПочтовыйАдрес));
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция бпсСтрНачинаетсяС(ИсходнаяСтрока,СтрокаПоиска)  
	Если НЕ ЗначениеЗаполнено(СтрокаПоиска) Тогда
		ВызватьИсключение "Ошибка! Не заполнен параметр ПодстрокаПоиска";
	Конецесли;
	ДлинаСтрокиПоиска = СтрДлина(СтрокаПоиска);
	ЧастьИсходнойСтроки = Лев(ИсходнаяСтрока,ДлинаСтрокиПоиска);
	Результат = ЧастьИсходнойСтроки = СтрокаПоиска;
	Возврат Результат;
КонецФункции 

Функция бпсСтрЗаканчиваетсяНа(ИсходнаяСтрока,СтрокаПоиска) 
	Если НЕ ЗначениеЗаполнено(СтрокаПоиска) Тогда
		ВызватьИсключение "Ошибка! Не заполнен параметр ПодстрокаПоиска";
	Конецесли;
	ДлинаСтрокиПоиска = СтрДлина(СтрокаПоиска);
	ЧастьИсходнойСтроки = Прав(ИсходнаяСтрока,ДлинаСтрокиПоиска);
	Результат = ЧастьИсходнойСтроки = СтрокаПоиска;
	Возврат Результат;
КонецФункции 

Функция бпсСтрНайти(ИсходнаяСтрока,ПодстрокаПоиска) 
	Возврат Найти(ИсходнаяСтрока,ПодстрокаПоиска);	
КонецФункции 

Функция бпсСтрРазделить(ИсходнаяСтрока, Разделитель, ВключатьПустые) 
	Если СтрДлина(Разделитель) > 1 Тогда
		ВызватьИсключение "Ошибка! нет алгоритма для разделителя длиною больше 1 символа";
	Конецесли;
	МассивСтрок = Новый Массив();
	
	ДлинаСтроки = СтрДлина(ИсходнаяСтрока);
	НомерСимвола = 1;
	ЧастьСтроки = "";
	Пока НомерСимвола <= ДлинаСтроки Цикл
		Символ = Сред(ИсходнаяСтрока,НомерСимвола,1);
		Если Символ = Разделитель Тогда
			бпсСтрРазделить_ДобавитьВМассивСтрок(МассивСтрок,ЧастьСтроки,ВключатьПустые);
			ЧастьСтроки = "";
		Иначе
			ЧастьСтроки = ЧастьСтроки + Символ; 
		КонецЕсли;
		НомерСимвола = НомерСимвола + 1;
	Конеццикла;
	
	Если ЗначениеЗаполнено(ЧастьСтроки) Тогда
		бпсСтрРазделить_ДобавитьВМассивСтрок(МассивСтрок,ЧастьСтроки,ВключатьПустые);
	Конецесли;
	
	Возврат МассивСтрок;
КонецФункции 

Процедура бпсСтрРазделить_ДобавитьВМассивСтрок(МассивСтрок,ЧастьСтроки,ВключатьПустые)
	Если НЕ ВключатьПустые Тогда
		ЧастьСтроки = СокрЛП(ЧастьСтроки);
		Если ЗначениеЗаполнено(ЧастьСтроки) Тогда
			МассивСтрок.Добавить(ЧастьСтроки);			
		Конецесли;
	Иначе
		МассивСтрок.Добавить(ЧастьСтроки);	
	Конецесли;
КонецПроцедуры 


// Проверяет, что почтовый адрес не содержит символов обрамления
// если символы обрамления вставлены правильно убирает их.
Функция ПроверитьИПодготовитьПочтовыйАдрес(Знач ПолноеИмяАдресата, Знач ПочтовыйАдрес)
	
	НедопустимыйСимволВИмениАдресата = НСтр("ru = 'Недопустимый символ в имени адресата.'");
	НедопустимыйСимволВПочтовомАдресе = НСтр("ru = 'Недопустимый символ в почтовом адресе.'");
	СимволыОбрамления = "<>[]";
	
	ПочтовыйАдрес     = СокрЛП(ПочтовыйАдрес);
	ПолноеИмяАдресата = СокрЛП(ПолноеИмяАдресата);
	
	Если бпсСтрНачинаетсяС(ПолноеИмяАдресата, "<") Тогда
		Если бпсСтрЗаканчиваетсяНа(ПолноеИмяАдресата, ">") Тогда
			ПолноеИмяАдресата = Сред(ПолноеИмяАдресата, 2, СтрДлина(ПолноеИмяАдресата)-2);
		Иначе
			ВызватьИсключение НедопустимыйСимволВИмениАдресата;
		КонецЕсли;
	ИначеЕсли бпсСтрНачинаетсяС(ПолноеИмяАдресата, "[") Тогда
		Если бпсСтрЗаканчиваетсяНа(ПолноеИмяАдресата, "]") Тогда
			ПолноеИмяАдресата = Сред(ПолноеИмяАдресата, 2, СтрДлина(ПолноеИмяАдресата)-2);
		Иначе
			ВызватьИсключение НедопустимыйСимволВИмениАдресата;
		КонецЕсли;
	КонецЕсли;
	
	Если бпсСтрНачинаетсяС(ПочтовыйАдрес, "<") Тогда
		Если бпсСтрЗаканчиваетсяНа(ПочтовыйАдрес, ">") Тогда
			ПочтовыйАдрес = Сред(ПочтовыйАдрес, 2, СтрДлина(ПочтовыйАдрес)-2);
		Иначе
			ВызватьИсключение НедопустимыйСимволВПочтовомАдресе;
		КонецЕсли;
	ИначеЕсли бпсСтрНачинаетсяС(ПочтовыйАдрес, "[") Тогда
		Если бпсСтрЗаканчиваетсяНа(ПочтовыйАдрес, "]") Тогда
			ПочтовыйАдрес = Сред(ПочтовыйАдрес, 2, СтрДлина(ПочтовыйАдрес)-2);
		Иначе
			ВызватьИсключение НедопустимыйСимволВПочтовомАдресе;
		КонецЕсли;
	КонецЕсли;
	
	Для Индекс = 1 По СтрДлина(СимволыОбрамления) Цикл
		Если бпсСтрНайти(ПолноеИмяАдресата, Сред(СимволыОбрамления, Индекс, 1)) <> 0
		 ИЛИ бпсСтрНайти(ПочтовыйАдрес,     Сред(СимволыОбрамления, Индекс, 1)) <> 0 Тогда
			ВызватьИсключение НедопустимыйСимволВПочтовомАдресе;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Новый Структура("Адрес, Представление", ПочтовыйАдрес,ПолноеИмяАдресата);
	
КонецФункции

// Сдвигает маркер позиции пока встречается символ Символ
// возвращает номер позиции в строке, на которое установился маркер.
//
Функция ПропуститьПробелы(Знач Строка,
                          Знач ТекущийИндекс,
                          Знач ПропускаемыйСимвол)
	
	Результат = ТекущийИндекс;
	
	// Убираем лишние пробелы если они есть.
	Пока ТекущийИндекс < СтрДлина(Строка) Цикл
		Если Сред(Строка, ТекущийИндекс, 1) <> ПропускаемыйСимвол Тогда
			Возврат ТекущийИндекс;
		КонецЕсли;
		ТекущийИндекс = ТекущийИндекс + 1;
	КонецЦикла;
	
	Возврат ТекущийИндекс;
	
КонецФункции

Функция ПодставитьПараметрыВСтроку(Знач СтрокаПодстановки,
	Знач Параметр1, Знач Параметр2 = Неопределено, Знач Параметр3 = Неопределено,
	Знач Параметр4 = Неопределено, Знач Параметр5 = Неопределено, Знач Параметр6 = Неопределено,
	Знач Параметр7 = Неопределено, Знач Параметр8 = Неопределено, Знач Параметр9 = Неопределено) Экспорт
	
	ИспользоватьАльтернативныйАлгоритм = 
		бпсСтрНайти(Параметр1, "%")
		Или бпсСтрНайти(Параметр2, "%")
		Или бпсСтрНайти(Параметр3, "%")
		Или бпсСтрНайти(Параметр4, "%")
		Или бпсСтрНайти(Параметр5, "%")
		Или бпсСтрНайти(Параметр6, "%")
		Или бпсСтрНайти(Параметр7, "%")
		Или бпсСтрНайти(Параметр8, "%")
		Или бпсСтрНайти(Параметр9, "%");
		
	Если ИспользоватьАльтернативныйАлгоритм Тогда
		СтрокаПодстановки = ПодставитьПараметрыВСтрокуАльтернативныйАлгоритм(СтрокаПодстановки, Параметр1,
			Параметр2, Параметр3, Параметр4, Параметр5, Параметр6, Параметр7, Параметр8, Параметр9);
	Иначе
		СтрокаПодстановки = СтрЗаменить(СтрокаПодстановки, "%1", Параметр1);
		СтрокаПодстановки = СтрЗаменить(СтрокаПодстановки, "%2", Параметр2);
		СтрокаПодстановки = СтрЗаменить(СтрокаПодстановки, "%3", Параметр3);
		СтрокаПодстановки = СтрЗаменить(СтрокаПодстановки, "%4", Параметр4);
		СтрокаПодстановки = СтрЗаменить(СтрокаПодстановки, "%5", Параметр5);
		СтрокаПодстановки = СтрЗаменить(СтрокаПодстановки, "%6", Параметр6);
		СтрокаПодстановки = СтрЗаменить(СтрокаПодстановки, "%7", Параметр7);
		СтрокаПодстановки = СтрЗаменить(СтрокаПодстановки, "%8", Параметр8);
		СтрокаПодстановки = СтрЗаменить(СтрокаПодстановки, "%9", Параметр9);
	КонецЕсли;
	
	Возврат СтрокаПодстановки;
КонецФункции

Функция ПодставитьПараметрыВСтрокуАльтернативныйАлгоритм(Знач СтрокаПодстановки,
	Знач Параметр1, Знач Параметр2 = Неопределено, Знач Параметр3 = Неопределено,
	Знач Параметр4 = Неопределено, Знач Параметр5 = Неопределено, Знач Параметр6 = Неопределено,
	Знач Параметр7 = Неопределено, Знач Параметр8 = Неопределено, Знач Параметр9 = Неопределено)
	
	Результат = "";
	Позиция = бпсСтрНайти(СтрокаПодстановки, "%");
	Пока Позиция > 0 Цикл 
		Результат = Результат + Лев(СтрокаПодстановки, Позиция - 1);
		СимволПослеПроцента = Сред(СтрокаПодстановки, Позиция + 1, 1);
		ПодставляемыйПараметр = "";
		Если СимволПослеПроцента = "1" Тогда
			ПодставляемыйПараметр =  Параметр1;
		ИначеЕсли СимволПослеПроцента = "2" Тогда
			ПодставляемыйПараметр =  Параметр2;
		ИначеЕсли СимволПослеПроцента = "3" Тогда
			ПодставляемыйПараметр =  Параметр3;
		ИначеЕсли СимволПослеПроцента = "4" Тогда
			ПодставляемыйПараметр =  Параметр4;
		ИначеЕсли СимволПослеПроцента = "5" Тогда
			ПодставляемыйПараметр =  Параметр5;
		ИначеЕсли СимволПослеПроцента = "6" Тогда
			ПодставляемыйПараметр =  Параметр6;
		ИначеЕсли СимволПослеПроцента = "7" Тогда
			ПодставляемыйПараметр =  Параметр7
		ИначеЕсли СимволПослеПроцента = "8" Тогда
			ПодставляемыйПараметр =  Параметр8;
		ИначеЕсли СимволПослеПроцента = "9" Тогда
			ПодставляемыйПараметр =  Параметр9;
		КонецЕсли;
		Если ПодставляемыйПараметр = "" Тогда
			Результат = Результат + "%";
			СтрокаПодстановки = Сред(СтрокаПодстановки, Позиция + 1);
		Иначе
			Результат = Результат + ПодставляемыйПараметр;
			СтрокаПодстановки = Сред(СтрокаПодстановки, Позиция + 2);
		КонецЕсли;
		Позиция = бпсСтрНайти(СтрокаПодстановки, "%");
	КонецЦикла;
	Результат = Результат + СтрокаПодстановки;
	
	Возврат Результат;
КонецФункции

Функция ОтправитьСообщение(Знач УчетнаяЗапись,
	                       Знач ПараметрыПисьма,
	                       Соединение = Неопределено) Экспорт
						   
	Если УчетнаяЗапись.ИспользоватьТиповыеСредства1сПриОтправкеПочты Тогда
		ИдентификаторСообщения = ОтправитьСообщение_ТиповыеСредства1с(УчетнаяЗапись,ПараметрыПисьма,Соединение);
	Иначе
		ИдентификаторСообщения = ОтправитьСообщение_АльтернативнаяОтправка(УчетнаяЗапись,ПараметрыПисьма);
	Конецесли;	
	Возврат ИдентификаторСообщения;
КонецФункции

Функция ОтправитьСообщение_АльтернативнаяОтправка(Знач УчетнаяЗапись,Знач ПараметрыПисьма) Экспорт
	Перем ИдентификаторСообщения,АдресКому;
	
	Оправитель         = УчетнаяЗапись.АдресЭлектроннойПочты;
	Пароль             = УчетнаяЗапись.Пароль;
	СерверИсходящейПочты = УчетнаяЗапись.СерверИсходящейПочты;
	ПортСервераИсходящейПочты = УчетнаяЗапись.ПортСервераИсходящейПочты;
	ВремяОжидания = УчетнаяЗапись.ВремяОжидания;
	
	loConfig         = Новый COMОбъект("CDO.Configuration");
	loCdoMessage     = Новый COMОбъект("CDO.Message");
	loCdoMessage.Configuration = loConfig;
	loCdoMessage.From    = УчетнаяЗапись.АдресЭлектроннойПочты;
		
	Кому = ПараметрыПисьма.Кому;
	Если ТипЗнч(Кому) = Тип("Строка") Тогда
		АдресКому = Кому; 
	Иначе
		АдресКому = "";
		Для Каждого ПочтовыйАдресПолучателя Из Кому Цикл
			АдресКому = АдресКому + ПочтовыйАдресПолучателя.Адрес + ", ";
		Конеццикла;
		АдресКому = Лев(АдресКому,СтрДлина(АдресКому) - 2);
	Конецесли;
	loCdoMessage.To      = АдресКому;
	loCdoMessage.Subject = ПараметрыПисьма.Тема;

	loCdoMessage.BodyPart.Charset = "utf-8"; 
	Textbody = ПараметрыПисьма.Тело;
	loCdoMessage.Textbody = Textbody;
	
	loConfig.Fields.Item("http://schemas.microsoft.com/cdo/configuration/sendusing").            Value = 2;
	loConfig.Fields.Item("http://schemas.microsoft.com/cdo/configuration/smtpserver").           Value = СерверИсходящейПочты;
	loConfig.Fields.Item("http://schemas.microsoft.com/cdo/configuration/smtpserverport").       Value = ПортСервераИсходящейПочты;
	loConfig.Fields.Item("http://schemas.microsoft.com/cdo/configuration/smtpauthenticate").     Value = 1;
	loConfig.Fields.Item("http://schemas.microsoft.com/cdo/configuration/sendusername").         Value = Оправитель;
	loConfig.Fields.Item("http://schemas.microsoft.com/cdo/configuration/sendpassword").         Value = Пароль;
	loConfig.Fields.Item("http://schemas.microsoft.com/cdo/configuration/smtpusessl").           Value = 1;
	loConfig.Fields.Item("http://schemas.microsoft.com/cdo/configuration/smtpconnectiontimeout").Value = ВремяОжидания;
	
	loConfig.Fields.Update();   
	Попытка
		loCdoMessage.Send();
		ИдентификаторСообщения = Строка(Новый УникальныйИдентификатор);
	Исключение
		РегистрыСведений.бпсОшибки.ДобавитьОшибку("Не удалось отправить сообщение ОписаниеОшибки " + ОписаниеОшибки(),ПредопределенноеЗначение("Перечисление.бпсТипыОшибок.НеУдалосьОтправитьУведомление")); 
		ВызватьИсключение ОписаниеОшибки();
	КонецПопытки;
	
	Возврат ИдентификаторСообщения;
КонецФункции

Функция ОтправитьСообщение_ТиповыеСредства1с(Знач УчетнаяЗапись,
	                       Знач ПараметрыПисьма,
	                       Соединение = Неопределено) Экспорт
	
	// Объявление переменных перед первым использованием в качестве
	// параметра метода Свойство структуры ПараметрыПисьма.
	// Переменные содержат значения переданных в функцию параметров.
	Перем Кому, Тема, Тело, Вложения, АдресОтвета, ТипТекста, Копии, СлепыеКопии;
	
	Если Не ПараметрыПисьма.Свойство("Тема", Тема) Тогда
		Тема = "";
	КонецЕсли;
	
	Если Не ПараметрыПисьма.Свойство("Тело", Тело) Тогда
		Тело = "";
	КонецЕсли;
	
	Кому = ПараметрыПисьма.Кому;
	
	Если ТипЗнч(Кому) = Тип("Строка") Тогда
		Кому = РазобратьСтрокуСПочтовымиАдресами(Кому);
	КонецЕсли;
	
	ПараметрыПисьма.Свойство("Вложения", Вложения);
	
	Письмо = Новый ИнтернетПочтовоеСообщение;
	Письмо.Тема = Тема;
	
	// Формируем адрес получателя.
	Для Каждого ПочтовыйАдресПолучателя Из Кому Цикл
		Получатель = Письмо.Получатели.Добавить(ПочтовыйАдресПолучателя.Адрес);
		Получатель.ОтображаемоеИмя = ПочтовыйАдресПолучателя.Представление;
	КонецЦикла;
	
	Если ПараметрыПисьма.Свойство("Копии", Копии) Тогда
		// Формируем адрес получателя поля Копии.
		Для Каждого ПочтовыйАдресПолучателяКопии Из Копии Цикл
			Получатель = Письмо.Копии.Добавить(ПочтовыйАдресПолучателяКопии.Адрес);
			Получатель.ОтображаемоеИмя = ПочтовыйАдресПолучателяКопии.Представление;
		КонецЦикла;
	КонецЕсли;
	
	Если ПараметрыПисьма.Свойство("СлепыеКопии", СлепыеКопии) Тогда
		// Формируем адрес получателя поля Копии.
		Для Каждого ПочтовыйАдресПолучателяСлепыеКопии Из СлепыеКопии Цикл
			Получатель = Письмо.СлепыеКопии.Добавить(ПочтовыйАдресПолучателяСлепыеКопии.Адрес);
			Получатель.ОтображаемоеИмя = ПочтовыйАдресПолучателяСлепыеКопии.Представление;
		КонецЦикла;
	КонецЕсли;
	
	// Формируем адрес ответа, если необходимо.
	Если ПараметрыПисьма.Свойство("АдресОтвета", АдресОтвета) Тогда
		Для Каждого ПочтовыйАдресОтвета Из АдресОтвета Цикл
			ПочтовыйАдресОбратный = Письмо.ОбратныйАдрес.Добавить(ПочтовыйАдресОтвета.Адрес);
			ПочтовыйАдресОбратный.ОтображаемоеИмя = ПочтовыйАдресОтвета.Представление;
		КонецЦикла;
	КонецЕсли;
	
	// Получение реквизитов отправителя.
	РеквизитыОтправителя = ЗначенияРеквизитовОбъекта(УчетнаяЗапись, "ИмяПользователя,АдресЭлектроннойПочты");
	
	// Добавляем к письму имя отправителя.
	Письмо.ИмяОтправителя              = РеквизитыОтправителя.ИмяПользователя;
	Письмо.Отправитель.ОтображаемоеИмя = РеквизитыОтправителя.ИмяПользователя;
	Письмо.Отправитель.Адрес           = РеквизитыОтправителя.АдресЭлектроннойПочты;
	
	// Добавляем вложения к письму.
	Если Вложения <> Неопределено Тогда
		Для Каждого Вложение Из Вложения Цикл
			Если ТипЗнч(Вложение) = Тип("Структура") Тогда
				НовоеВложение = Письмо.Вложения.Добавить(ПолучитьИзВременногоХранилища(Вложение.АдресВоВременномХранилище), Вложение.Представление);
				Если Вложение.Свойство("Кодировка") И Не ПустаяСтрока(Вложение.Кодировка) Тогда
					НовоеВложение.Кодировка = Вложение.Кодировка;
				КонецЕсли;
				Если Вложение.Свойство("Идентификатор") Тогда
					НовоеВложение.Идентификатор = Вложение.Идентификатор;
				КонецЕсли;
			Иначе // Поддержка обратной совместимости с 2.2.1.
				Если ТипЗнч(Вложение.Значение) = Тип("Структура") Тогда
					НовоеВложение = Письмо.Вложения.Добавить(Вложение.Значение.ДвоичныеДанные, Вложение.Ключ);
					НовоеВложение.Идентификатор = Вложение.Значение.Идентификатор;
					Если Вложение.Значение.Свойство("Кодировка") Тогда
						НовоеВложение.Кодировка = Вложение.Значение.Кодировка;
					КонецЕсли;
				Иначе
					Письмо.Вложения.Добавить(Вложение.Значение, Вложение.Ключ);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;

	// Установим строку с идентификаторами оснований.
	Если ПараметрыПисьма.Свойство("ИдентификаторыОснований") Тогда
		Письмо.УстановитьПолеЗаголовка("References", ПараметрыПисьма.ИдентификаторыОснований);
	КонецЕсли;
	
	// добавляем текст
	Текст = Письмо.Тексты.Добавить(Тело);
	Если ПараметрыПисьма.Свойство("ТипТекста", ТипТекста) Тогда
		Если ТипЗнч(ТипТекста) = Тип("Строка") Тогда
			Если      ТипТекста = "HTML" Тогда
				Текст.ТипТекста = ТипТекстаПочтовогоСообщения.HTML;
			ИначеЕсли ТипТекста = "RichText" Тогда
				Текст.ТипТекста = ТипТекстаПочтовогоСообщения.РазмеченныйТекст;
			Иначе
				Текст.ТипТекста = ТипТекстаПочтовогоСообщения.ПростойТекст;
			КонецЕсли;
		//ИначеЕсли ТипЗнч(ТипТекста) = Тип("ПеречислениеСсылка.ТипыТекстовЭлектронныхПисем") Тогда
		//	Если      ТипТекста = Перечисления.ТипыТекстовЭлектронныхПисем.HTML
		//		  ИЛИ ТипТекста = Перечисления.ТипыТекстовЭлектронныхПисем.HTMLСКартинками Тогда
		//		Текст.ТипТекста = ТипТекстаПочтовогоСообщения.HTML;
		//	ИначеЕсли ТипТекста = Перечисления.ТипыТекстовЭлектронныхПисем.РазмеченныйТекст Тогда
		//		Текст.ТипТекста = ТипТекстаПочтовогоСообщения.РазмеченныйТекст;
		//	Иначе
		//		Текст.ТипТекста = ТипТекстаПочтовогоСообщения.ПростойТекст;
		//	КонецЕсли;
		Иначе
			Текст.ТипТекста = ТипТекста;
		КонецЕсли;
	Иначе
		Текст.ТипТекста = ТипТекстаПочтовогоСообщения.ПростойТекст;
	КонецЕсли;

	// Зададим важность
	Важность = Неопределено;
	Если ПараметрыПисьма.Свойство("Важность", Важность) Тогда
		Письмо.Важность = Важность;
	КонецЕсли;
	
	// Зададим кодировку
	Кодировка = Неопределено;
	Если ПараметрыПисьма.Свойство("Кодировка", Кодировка) Тогда
		Письмо.Кодировка = Кодировка;
	КонецЕсли;

	Если ПараметрыПисьма.Свойство("ОбрабатыватьТексты") И НЕ ПараметрыПисьма.ОбрабатыватьТексты Тогда
		ОбрабатыватьТекстСообщения =  ОбработкаТекстаИнтернетПочтовогоСообщения.НеОбрабатывать;
	Иначе
		ОбрабатыватьТекстСообщения =  ОбработкаТекстаИнтернетПочтовогоСообщения.Обрабатывать;
	КонецЕсли;
	
	Если ПараметрыПисьма.Свойство("УведомитьОДоставке") Тогда
		Письмо.УведомитьОДоставке = ПараметрыПисьма.УведомитьОДоставке;
		Письмо.АдресаУведомленияОДоставке.Добавить(РеквизитыОтправителя.АдресЭлектроннойПочты);
	КонецЕсли;
	
	Если ПараметрыПисьма.Свойство("УведомитьОПрочтении") Тогда
		Письмо.УведомитьОПрочтении = ПараметрыПисьма.УведомитьОПрочтении;
		Письмо.АдресаУведомленияОПрочтении.Добавить(РеквизитыОтправителя.АдресЭлектроннойПочты);
	КонецЕсли;
	
	Если ТипЗнч(Соединение) <> Тип("ИнтернетПочта") Тогда
		Соединение = УстановитьСоединениеСПочтой(УчетнаяЗапись);
	КонецЕсли;

	Соединение.Послать(Письмо, ОбрабатыватьТекстСообщения);
	
	Возврат Письмо.ИдентификаторСообщения;
	
КонецФункции


Функция УстановитьСоединениеСПочтой(УчетнаяЗапись) Экспорт 
	Соединение = Неопределено;
	Если НЕ УчетнаяЗапись.ИспользоватьТиповыеСредства1сПриОтправкеПочты Тогда
		Возврат Соединение;
	Конецесли;
	Профиль = ИнтернетПочтовыйПрофиль(УчетнаяЗапись);
	Соединение = Новый ИнтернетПочта;
	Соединение.Подключиться(Профиль);
	Возврат Соединение;
КонецФункции 

Функция ЗначенияРеквизитовОбъекта(Ссылка, Знач Реквизиты) Экспорт
	
	Если ТипЗнч(Реквизиты) = Тип("Строка") Тогда
		Если ПустаяСтрока(Реквизиты) Тогда
			Возврат Новый Структура;
		КонецЕсли;
		Реквизиты = бпсСтрРазделить(Реквизиты, ",", Ложь);
	КонецЕсли;
	
	СтруктураРеквизитов = Новый Структура;
	Если ТипЗнч(Реквизиты) = Тип("Структура") Или ТипЗнч(Реквизиты) = Тип("ФиксированнаяСтруктура") Тогда
		СтруктураРеквизитов = Реквизиты;
	ИначеЕсли ТипЗнч(Реквизиты) = Тип("Массив") Или ТипЗнч(Реквизиты) = Тип("ФиксированныйМассив") Тогда
		Для Каждого Реквизит Из Реквизиты Цикл
			СтруктураРеквизитов.Вставить(СтрЗаменить(Реквизит, ".", ""), Реквизит);
		КонецЦикла;
	Иначе
		ВызватьИсключение ПодставитьПараметрыВСтроку(НСтр("ru = 'Неверный тип второго параметра Реквизиты: %1'"), Строка(ТипЗнч(Реквизиты)));
	КонецЕсли;
	
	ТекстПолей = "";
	Для Каждого КлючИЗначение Из СтруктураРеквизитов Цикл
		ИмяПоля   = ?(ЗначениеЗаполнено(КлючИЗначение.Значение),
		              СокрЛП(КлючИЗначение.Значение),
		              СокрЛП(КлючИЗначение.Ключ));
		
		Псевдоним = СокрЛП(КлючИЗначение.Ключ);
		
		ТекстПолей  = ТекстПолей + ?(ПустаяСтрока(ТекстПолей), "", ",") + "
		|	" + ИмяПоля + " КАК " + Псевдоним;
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.Текст =
	"ВЫБРАТЬ
	|" + ТекстПолей + "
	|ИЗ
	|	" + Ссылка.Метаданные().ПолноеИмя() + " КАК ПсевдонимЗаданнойТаблицы
	|ГДЕ
	|	ПсевдонимЗаданнойТаблицы.Ссылка = &Ссылка
	|";
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	
	Результат = Новый Структура;
	Для Каждого КлючИЗначение Из СтруктураРеквизитов Цикл
		Результат.Вставить(КлючИЗначение.Ключ);
	КонецЦикла;
	ЗаполнитьЗначенияСвойств(Результат, Выборка);
	
	Возврат Результат;
	
КонецФункции

Функция ИнтернетПочтовыйПрофиль(УчетнаяЗапись) Экспорт
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	УчетныеЗаписиЭлектроннойПочты.СерверВходящейПочты КАК АдресСервераIMAP,
	|	УчетныеЗаписиЭлектроннойПочты.ПортСервераВходящейПочты КАК ПортIMAP,
	|	УчетныеЗаписиЭлектроннойПочты.ИспользоватьЗащищенноеСоединениеДляВходящейПочты КАК ИспользоватьSSLIMAP,
	|	УчетныеЗаписиЭлектроннойПочты.Пользователь КАК ПользовательIMAP,
	|	УчетныеЗаписиЭлектроннойПочты.ИспользоватьБезопасныйВходНаСерверВходящейПочты КАК ТолькоЗащищеннаяАутентификацияIMAP,
	|	УчетныеЗаписиЭлектроннойПочты.СерверВходящейПочты КАК АдресСервераPOP3,
	|	УчетныеЗаписиЭлектроннойПочты.ПортСервераВходящейПочты КАК ПортPOP3,
	|	УчетныеЗаписиЭлектроннойПочты.ИспользоватьЗащищенноеСоединениеДляВходящейПочты КАК ИспользоватьSSLPOP3,
	|	УчетныеЗаписиЭлектроннойПочты.Пользователь КАК Пользователь,
	|	УчетныеЗаписиЭлектроннойПочты.ИспользоватьБезопасныйВходНаСерверВходящейПочты КАК ТолькоЗащищеннаяАутентификацияPOP3,
	|	УчетныеЗаписиЭлектроннойПочты.СерверИсходящейПочты КАК АдресСервераSMTP,
	|	УчетныеЗаписиЭлектроннойПочты.ПортСервераИсходящейПочты КАК ПортSMTP,
	|	УчетныеЗаписиЭлектроннойПочты.ИспользоватьЗащищенноеСоединениеДляИсходящейПочты КАК ИспользоватьSSLSMTP,
	|	УчетныеЗаписиЭлектроннойПочты.ТребуетсяВходНаСерверПередОтправкой КАК POP3ПередSMTP,
	|	УчетныеЗаписиЭлектроннойПочты.ПользовательSMTP КАК ПользовательSMTP,
	|	УчетныеЗаписиЭлектроннойПочты.ИспользоватьБезопасныйВходНаСерверИсходящейПочты КАК ТолькоЗащищеннаяАутентификацияSMTP,
	|	УчетныеЗаписиЭлектроннойПочты.ВремяОжидания КАК Таймаут,
	|	УчетныеЗаписиЭлектроннойПочты.ПротоколВходящейПочты КАК Протокол,
	|	УчетныеЗаписиЭлектроннойПочты.Пароль,
	|	УчетныеЗаписиЭлектроннойПочты.ПарольSMTP
	|ИЗ
	|	Справочник.бпсУчетныеЗаписиЭлектроннойПочты КАК УчетныеЗаписиЭлектроннойПочты
	|ГДЕ
	|	УчетныеЗаписиЭлектроннойПочты.Ссылка = &Ссылка";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Ссылка", УчетнаяЗапись);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Результат = Неопределено;
	Если Выборка.Следующий() Тогда
		СписокСвойствIMAP = "АдресСервераIMAP,ПортIMAP,ИспользоватьSSLIMAP,ПользовательIMAP,ТолькоЗащищеннаяАутентификацияIMAP";
		СписокСвойствPOP3 = "АдресСервераPOP3,ПортPOP3,Пароль,ИспользоватьSSLPOP3,Пользователь,ТолькоЗащищеннаяАутентификацияPOP3";
		СписокСвойствSMTP = "АдресСервераSMTP,ПортSMTP,ПарольSMTP,ИспользоватьSSLSMTP,ПользовательSMTP,ТолькоЗащищеннаяАутентификацияSMTP";
		
		Результат = Новый ИнтернетПочтовыйПрофиль;
		ТребуемыеСвойства = СписокСвойствSMTP;
		Если Выборка.Протокол <> "IMAP" И Выборка.POP3ПередSMTP Тогда
			ТребуемыеСвойства = ТребуемыеСвойства + ",POP3ПередSMTP," + СписокСвойствPOP3;
		КонецЕсли;

		ТребуемыеСвойства = ТребуемыеСвойства + ",Таймаут";
		ЗаполнитьЗначенияСвойств(Результат, Выборка, ТребуемыеСвойства);
	КонецЕсли;
	
	Возврат Результат;

	
КонецФункции

Процедура бпсОтправкаСообщений() Экспорт
	РегистрыСведений.бпсСообщения.ОтправитьСообщения();
	РегистрыСведений.бпсСообщения.ВыполнитьРассылкуТелеграмм();
КонецПроцедуры

Функция ЭтоРабочаяБаза() Экспорт
	пЭтоРабочаяБаза = Истина;
	//СтрокаДанныеБазы = СтрокаСоединенияИнформационнойБазы();
	//ИмяРабочейБазы = СокрЛП(Строка(Справочники.бпсКонстанты.ИмяРабочейБазы.Значение));
	//Если ЗначениеЗаполнено(ИмяРабочейБазы) Тогда
	//	Если Найти(СтрокаДанныеБазы,ИмяРабочейБазы)>0 Тогда
	//		пЭтоРабочаяБаза = Истина;			
	//	КонецЕсли;
	//КонецЕсли; 
	
	Возврат пЭтоРабочаяБаза;

КонецФункции

