Перем КонтекстЯдра;
Перем Утверждения;
Перем ГенераторТестовыхДанных;
Перем УтвержденияПроверкаТаблиц;
Перем Ожидаем;
Перем СериализаторMXL;

Процедура Инициализация(КонтекстЯдраПараметр) Экспорт
    КонтекстЯдра = КонтекстЯдраПараметр;
    //Утверждения = КонтекстЯдра.Плагин("БазовыеУтверждения");
	Ожидаем = КонтекстЯдра.Плагин("УтвержденияBDD");
    ГенераторТестовыхДанных = КонтекстЯдра.Плагин("СериализаторMXL");
    //УтвержденияПроверкаТаблиц = КонтекстЯдра.Плагин("УтвержденияПроверкаТаблиц");
КонецПроцедуры

Процедура ЗаполнитьНаборТестов(НаборТестов) Экспорт
	
	НаборТестов.Добавить("ТестДолжен_ЗапускСогласованийПоСценариям");
	
КонецПроцедуры

Процедура ТестДолжен_ЗапускСогласованийПоСценариям() Экспорт
	мТЗПоискКэш = СоздатьСтруктурумТЗПоискКэш();
	КоличествоТестов = Неопределено;
	ТЗТесты = ЗагрузитьТЗТесты(мТЗПоискКэш,КоличествоТестов);
	
	Ожидаем.Что(ТЗТесты.Количество(),"ТЗТесты.Количество()").Равно(КоличествоТестов);
	
	КоличествоСтрокВЛистахСогласования = Неопределено;
	ТЗТестыЛистыСогласования = ЗагрузитьТЗТестыЛистыСогласования(мТЗПоискКэш,КоличествоСтрокВЛистахСогласования);
	Ожидаем.Что(ТЗТестыЛистыСогласования.Количество(),"ТЗТестыЛистыСогласования.Количество()").Равно(КоличествоСтрокВЛистахСогласования);

	КоличествоСтрокВДействияхПользователя = Неопределено;
	ТЗТестыДействияПользователя = ЗагрузитьТЗТестыДействияПользователя(мТЗПоискКэш,КоличествоСтрокВДействияхПользователя);
	Ожидаем.Что(ТЗТестыДействияПользователя.Количество(),"ТЗТестыДействияПользователя.Количество()").Равно(КоличествоСтрокВДействияхПользователя);	
	
	ПроверитьЗаполненыЛиЯчейкиВТЗ(ТЗТесты,"ТЗТесты");	
	ПроверитьЗаполненыЛиЯчейкиВТЗ(ТЗТестыЛистыСогласования,"ТЗТестыЛистыСогласования");	
	ПроверитьЗаполненыЛиЯчейкиВТЗ(ТЗТестыДействияПользователя,"ТЗТестыДействияПользователя","Рецензия");
	
	Для каждого СтрокаТЗТесты из ТЗТесты цикл
		пОбъектБД = СтрокаТЗТесты.ОбъектБД;
		пПредметСогласования = СтрокаТЗТесты.ПредметСогласования;
		НомерТеста = СтрокаТЗТесты.НомерТеста;
		
		БизнесПроцессОбъект = БизнесПроцессы.бпсСогласование.СоздатьБизнесПроцесс();
		БизнесПроцессОбъект.Дата = ТекущаяДата();
		БизнесПроцессОбъект.ОбъектБД = пОбъектБД;	
		БизнесПроцессОбъект.ПредметСогласования = пПредметСогласования;
		БизнесПроцессОбъект.Инициатор = ПараметрыСеанса.ТекущийПользователь;
		
		ДанныеЗаполнения = Новый Структура();
		ДанныеЗаполнения.Вставить("ОбъектБД",пОбъектБД);
		ДанныеЗаполнения.Вставить("ПредметСогласования",пПредметСогласования);		
		БизнесПроцессОбъект.Заполнить(ДанныеЗаполнения);				
		БизнесПроцессОбъект.Записать();
		БизнесПроцессОбъект.Старт();	
		БизнесПроцессСсылка = БизнесПроцессОбъект.Ссылка;
			
		
		Ожидаем.Что(БизнесПроцессСсылка.ТекущийНомерОчереди,"БизнесПроцессОбъект.ТекущийНомерОчереди").Равно(1);
		Ожидаем.Что(БизнесПроцессСсылка,"БП существует").Существует();
		Ожидаем.Что(БизнесПроцессСсылка.ПользователиДляУведомления.Количество(),"ПользователиДляУведомления.Количество()").Равно(1);
		Ожидаем.Что(БизнесПроцессСсылка.Действия.Количество(),"Действия.Количество()").Равно(3);
		
		Ожидаем.Что(БизнесПроцессСсылка.ТекущийНомерОчереди,"ТекущийНомерОчереди").Равно(1);
		Ожидаем.Что(БизнесПроцессСсылка.ОбъектБД,"ОбъектБД").Заполнено();
		Ожидаем.Что(БизнесПроцессСсылка.ПредметСогласования,"ПредметСогласования").Заполнено();
		Ожидаем.Что(БизнесПроцессСсылка.Инициатор,"Инициатор").Заполнено();	
		Ожидаем.Что(БизнесПроцессСсылка.Пояснение,"Пояснение").Заполнено();
		Ожидаем.Что(БизнесПроцессСсылка.ПротоколФормированияЛистаСогласования,"ПротоколФормированияЛистаСогласования").Заполнено();
		Ожидаем.Что(БизнесПроцессСсылка.УпрощеннаяСистемаУведомлений,"УпрощеннаяСистемаУведомлений").ЭтоИстина();
		Ожидаем.Что(БизнесПроцессСсылка.УведомитьИнициатораОЗавершении,"УведомитьИнициатораОЗавершении").ЭтоИстина();
		Ожидаем.Что(БизнесПроцессСсылка.РазрешеноПовторноеСогласование,"РазрешеноПовторноеСогласование").ЭтоИстина();
		
		ПроверитьЛистСогласования(СтрокаТЗТесты,БизнесПроцессОбъект,ТЗТестыЛистыСогласования);
		
		ДопПараметрыСтатус = Новый Структура();
		ДопПараметрыСтатус.Вставить("ОбъектБД",пОбъектБД);
		ДопПараметрыСтатус.Вставить("ПредметСогласования",пПредметСогласования);
		ДопПараметрыСтатус.Вставить("ТребуемыйСтатус",Справочники.бпсСтатусыОбъектов.Согласование_ВПроцессеСогласования);
		ДопПараметрыСтатус.Вставить("ТребуемоеОснование",БизнесПроцессСсылка);
		ПроверитьСтатусОбъектаСогласования(ДопПараметрыСтатус);
		
		ПроверитьЗаблокированЛиОбъект(пОбъектБД,Истина,"После старта");
		
		Этап = 1;
		Для каждого СтрокаЛистСогласования из БизнесПроцессОбъект.ЛистСогласования цикл
			СтрокаТЗТестыДействияПользователя = ПолучитьСтрокуТЗТестыДействияПользователя(НомерТеста,СтрокаЛистСогласования.Очередь, Этап, ТЗТестыДействияПользователя);			
			
			Пока СтрокаТЗТестыДействияПользователя <> Неопределено Цикл
				
				ДопПараметры = Новый Структура();
				ДопПараметры.Вставить("БизнесПроцесс",БизнесПроцессСсылка);
				ДопПараметры.Вставить("СтрокаЛистСогласования",СтрокаЛистСогласования);
				ДопПараметры.Вставить("Этап",Этап);
				ДопПараметры.Вставить("КомандаСогласования",СтрокаТЗТестыДействияПользователя.КомандаСогласования);
				ЗадачаСсылка = ПолучитьЗадачу(ДопПараметры);
				
				ПроверитьЗаписиРСЗадачиПоБизнесПроцессам(пОбъектБД,БизнесПроцессСсылка,ЗадачаСсылка,СтрокаТЗТестыДействияПользователя,Ложь);
				
				БизнесПроцессОбъект = БизнесПроцессСсылка.ПолучитьОбъект(); //Специально еще раз читаю объект
				ДопПараметрыЗадачи = Новый Структура();		
				ДопПараметрыЗадачи.Вставить("ЗадачаСсылка",ЗадачаСсылка);
				ДопПараметрыЗадачи.Вставить("КомандаСогласования",СтрокаТЗТестыДействияПользователя.КомандаСогласования);
				ДопПараметрыЗадачи.Вставить("Рецензия",СтрокаТЗТестыДействияПользователя.Рецензия);
				БизнесПроцессОбъект.ВыполнитьЗадачу(ДопПараметрыЗадачи);		
				
				ДопПараметрыСтатус = Новый Структура();
				ДопПараметрыСтатус.Вставить("ОбъектБД",пОбъектБД);
				ДопПараметрыСтатус.Вставить("ПредметСогласования",пПредметСогласования);
				ДопПараметрыСтатус.Вставить("ТребуемыйСтатус",СтрокаТЗТестыДействияПользователя.СтатусПослеВыполненияКоманды);
				ДопПараметрыСтатус.Вставить("ТребуемоеОснование",БизнесПроцессСсылка);
				ДопПараметрыСтатус.Вставить("СтрокаТЗТестыДействияПользователя",СтрокаТЗТестыДействияПользователя);
				ПроверитьСтатусОбъектаСогласования(ДопПараметрыСтатус);				
				
				Если СтрокаТЗТестыДействияПользователя.КомандаСогласования = ПредопределенноеЗначение("Перечисление.бпсКомандыСогласования.ВернутьНаДоработку") Тогда
					ПроверитьЗаблокированЛиОбъект(пОбъектБД,Ложь,"После возвращения на доработку");	
				Конецесли;
				
				ПроверитьЗаписиРСЗадачиПоБизнесПроцессам(пОбъектБД,БизнесПроцессСсылка,ЗадачаСсылка,СтрокаТЗТестыДействияПользователя,Истина);
				Этап = Этап + 1;
				СтрокаТЗТестыДействияПользователя = ПолучитьСтрокуТЗТестыДействияПользователя(НомерТеста,СтрокаЛистСогласования.Очередь, Этап, ТЗТестыДействияПользователя);
			Конеццикла;
		Конеццикла;
		
		ДопПараметрыСтатус = Новый Структура();
		ДопПараметрыСтатус.Вставить("ОбъектБД",пОбъектБД);
		ДопПараметрыСтатус.Вставить("ПредметСогласования",пПредметСогласования);
		ДопПараметрыСтатус.Вставить("ТребуемыйСтатус",СтрокаТЗТесты.СтатусПослеОкончанияСогласования);
		ДопПараметрыСтатус.Вставить("ТребуемоеОснование",БизнесПроцессСсылка);
		ПроверитьСтатусОбъектаСогласования(ДопПараметрыСтатус);
		
		ДопПараметрыСтатус = Новый Структура();
		ДопПараметрыСтатус.Вставить("ОбъектБД",БизнесПроцессСсылка);
		ДопПараметрыСтатус.Вставить("ПредметСогласования",пПредметСогласования);
		ДопПараметрыСтатус.Вставить("ТребуемыйСтатус",СтрокаТЗТесты.СтатусПослеОкончанияСогласования);
		ДопПараметрыСтатус.Вставить("ТребуемоеОснование",БизнесПроцессСсылка);
		ПроверитьСтатусОбъектаСогласования(ДопПараметрыСтатус);	
		
		ПроверитьЗаблокированЛиОбъект(пОбъектБД,СтрокаТЗТесты.ЗаблокированОбъектПослеЗавершения, "После завершения");
	Конеццикла;	
КонецПроцедуры 

Процедура ПроверитьЗаблокированЛиОбъект(пОбъектБД,НеобходимоЧтобыБылЗаблокирован,ИмяСобытия)
	//Sleep(1);
	ДопПараметрыЗаблокированныеОбъекты = Новый Структура();
	ДопПараметрыЗаблокированныеОбъекты.Вставить("ОбъектБД",пОбъектБД);
	РезультатЗапросаРС_бпсЗаблокированныеОбъекты = ПолучитьРезультатЗапросаРС_бпсЗаблокированныеОбъекты(ДопПараметрыЗаблокированныеОбъекты);
	
	Если НеобходимоЧтобыБылЗаблокирован Тогда
		Ожидаем.Что(РезультатЗапросаРС_бпсЗаблокированныеОбъекты.Пустой(),"РезультатЗапросаРС_бпсЗаблокированныеОбъекты ИмяСобытия " + ИмяСобытия).ЭтоЛожь();
		ВыборкаРС_бпсЗаблокированныеОбъекты = РезультатЗапросаРС_бпсЗаблокированныеОбъекты.Выбрать();
		Ожидаем.Что(ВыборкаРС_бпсЗаблокированныеОбъекты.Количество(),"ВыборкаРС_бпсЗаблокированныеОбъекты.Количество()").Равно(1);	
		
		ВыборкаРС_бпсЗаблокированныеОбъекты.Следующий();

		Ожидаем.Что(ВыборкаРС_бпсЗаблокированныеОбъекты.ОбъектБД,"ВыборкаРС_бпсЗаблокированныеОбъекты.ОбъектБД").Равно(пОбъектБД);
	Иначе
		Ожидаем.Что(РезультатЗапросаРС_бпсЗаблокированныеОбъекты.Пустой(),"РезультатЗапросаРС_бпсЗаблокированныеОбъекты").ЭтоИстина();
	Конецесли;
КонецПроцедуры 

Функция ПолучитьРезультатЗапросаРС_бпсЗаблокированныеОбъекты(ДопПараметры) Экспорт 
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	бпсЗаблокированныеОбъекты.ОбъектБД
	|ИЗ
	|	РегистрСведений.бпсЗаблокированныеОбъекты КАК бпсЗаблокированныеОбъекты
	|ГДЕ
	|	бпсЗаблокированныеОбъекты.ОбъектБД = &ОбъектБД";
	
	Запрос.УстановитьПараметр("ОбъектБД", ДопПараметры.ОбъектБД);
	
	РезультатЗапроса = Запрос.Выполнить();
	Возврат РезультатЗапроса;	
КонецФункции //ПолучитьРезультатЗапросаРС_бпсЗаблокированныеОбъекты(ДопПараметрыЗаблокированныеОбъекты)


Процедура ПроверитьЗаписиРСЗадачиПоБизнесПроцессам(пОбъектБД,БизнесПроцессСсылка,ЗадачаСсылка,СтрокаТЗТестыДействияПользователя,ЗадачаПослеВыполнения)
	ДопПараметрыЗаписиРС = Новый Структура();
	ДопПараметрыЗаписиРС.Вставить("ОбъектБД",пОбъектБД);
	ДопПараметрыЗаписиРС.Вставить("ИсходныйБизнесПроцесс",БизнесПроцессСсылка);
	ДопПараметрыЗаписиРС.Вставить("Задача",ЗадачаСсылка);
	РезультатЗапросаРС_бпсЗадачиПоБизнесПроцессам = ПолучитьРезультатЗапросаРС_бпсЗадачиПоБизнесПроцессам(ДопПараметрыЗаписиРС);
	
	Ожидаем.Что(РезультатЗапросаРС_бпсЗадачиПоБизнесПроцессам.Пустой(), "бпсЗадачиПоБизнесПроцессам РезультатЗапроса").ЭтоЛожь();
	ВыборкаРС_бпсЗадачиПоБизнесПроцессам = РезультатЗапросаРС_бпсЗадачиПоБизнесПроцессам.Выбрать();
	Ожидаем.Что(ВыборкаРС_бпсЗадачиПоБизнесПроцессам.Количество(),"бпсЗадачиПоБизнесПроцессам Выборка.Количество()").Равно(1);	
	
	ВыборкаРС_бпсЗадачиПоБизнесПроцессам.Следующий();
	пСогласовано = Ложь;
	Если ЗадачаПослеВыполнения
		И СтрокаТЗТестыДействияПользователя.КомандаСогласования = ПредопределенноеЗначение("Перечисление.бпсКомандыСогласования.Согласовано") Тогда
		пСогласовано = Истина;
	Конецесли;
	ТекстПоясненияОшибки = "ВыборкаРС_бпсЗадачиПоБизнесПроцессам.Согласовано "
		+"для этапа ["+СтрокаТЗТестыДействияПользователя.Этап+"] "		
		+"КомандаСогласования ["+СтрокаТЗТестыДействияПользователя.КомандаСогласования+"] "
		+"ЗадачаПослеВыполнения ["+ЗадачаПослеВыполнения+"] "
		;
	Ожидаем.Что(ВыборкаРС_бпсЗадачиПоБизнесПроцессам.Согласовано,ТекстПоясненияОшибки).Равно(пСогласовано);
	пРецензия = СтрокаТЗТестыДействияПользователя.Рецензия;
	Если ЗадачаПослеВыполнения
		И ЗначениеЗаполнено(пРецензия) Тогда 
		ТекстПоясненияОшибки = "ВыборкаРС_бпсЗадачиПоБизнесПроцессам.Рецензия "
			+"для этапа ["+СтрокаТЗТестыДействияПользователя.Этап+"] "		
			+"КомандаСогласования ["+СтрокаТЗТестыДействияПользователя.КомандаСогласования+"] "
			+"ЗадачаПослеВыполнения ["+ЗадачаПослеВыполнения+"] "
			+"пРецензия ["+пРецензия+"] "
			;		
		Ожидаем.Что(ВыборкаРС_бпсЗадачиПоБизнесПроцессам.Рецензия,ТекстПоясненияОшибки).Заполнено().Равно(пРецензия);
	Конецесли;
	Если ЗадачаПослеВыполнения Тогда
		Ожидаем.Что(ЗадачаСсылка.ФактическийИсполнитель,"ЗадачаСсылка.ФактическийИсполнитель").Заполнено();
		Ожидаем.Что(ЗадачаСсылка.ФактическаяДатаВыполнения,"ЗадачаСсылка.ФактическаяДатаВыполнения").Заполнено();
	Конецесли;
КонецПроцедуры 

Функция ПолучитьРезультатЗапросаРС_бпсЗадачиПоБизнесПроцессам(ДопПараметры) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	бпсЗадачиПоБизнесПроцессам.ОбъектБД,
	|	бпсЗадачиПоБизнесПроцессам.ИсходныйБизнесПроцесс,
	|	бпсЗадачиПоБизнесПроцессам.Задача,
	|	бпсЗадачиПоБизнесПроцессам.Рецензия,
	|	бпсЗадачиПоБизнесПроцессам.Согласовано,
	|	бпсЗадачиПоБизнесПроцессам.ВыводитьВОтчет,
	|	бпсЗадачиПоБизнесПроцессам.Очередь
	|ИЗ
	|	РегистрСведений.бпсЗадачиПоБизнесПроцессам КАК бпсЗадачиПоБизнесПроцессам
	|ГДЕ
	|	бпсЗадачиПоБизнесПроцессам.ОбъектБД = &ОбъектБД
	|	И бпсЗадачиПоБизнесПроцессам.ИсходныйБизнесПроцесс = &ИсходныйБизнесПроцесс
	|	И бпсЗадачиПоБизнесПроцессам.Задача = &Задача";
	
	Запрос.УстановитьПараметр("Задача", ДопПараметры.Задача);
	Запрос.УстановитьПараметр("ИсходныйБизнесПроцесс", ДопПараметры.ИсходныйБизнесПроцесс);
	Запрос.УстановитьПараметр("ОбъектБД", ДопПараметры.ОбъектБД);
	
	РезультатЗапроса = Запрос.Выполнить();
	Возврат РезультатЗапроса;
	
КонецФункции

Функция ПолучитьСтрокуТЗТестыДействияПользователя(НомерТеста,Очередь, Этап,ТЗТестыДействияПользователя); 
	СтрокаТЗТестыДействияПользователя = Неопределено;
	ПараметрыОтбора=Новый Структура();
	ПараметрыОтбора.Вставить("НомерТеста",НомерТеста);
	ПараметрыОтбора.Вставить("Очередь",Очередь);
	ПараметрыОтбора.Вставить("Этап",Этап);
	НайденныеСтроки = ТЗТестыДействияПользователя.НайтиСтроки(ПараметрыОтбора);
	ВсегоНайденныеСтроки = НайденныеСтроки.Количество();
	ТекстОшибки = "";
	Если ВсегоНайденныеСтроки = 1 тогда
		СтрокаТЗТестыДействияПользователя = НайденныеСтроки[0];	
		Возврат СтрокаТЗТестыДействияПользователя;
	ИначеЕсли ВсегоНайденныеСтроки > 1 Тогда
		ТекстОшибки = "Ошибка! Найдено более 1 строки";
	//Иначе
	//	ТекстОшибки = "Ошибка! Не найдена строка";
	Конецесли;
	
	Если ЗначениеЗаполнено(ТекстОшибки) Тогда
		ТекстОшибки = ТекстОшибки  
			+" в ""ТЗТестыДействияПользователя"" для ";
		Для каждого ЭлементОтбора из ПараметрыОтбора цикл
			ТекстОшибки = ТекстОшибки  
				+" "+ ЭлементОтбора.Ключ + " = "+ЭлементОтбора.Значение;				
		Конеццикла;
		ВызватьИсключение ТекстОшибки;	
	Конецесли;
	Возврат СтрокаТЗТестыДействияПользователя;	
КонецФункции 

Функция ПолучитьЗадачу(ДопПараметры) Экспорт
	ЗадачаСсылка = Неопределено;
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	бпсЗадача.Ссылка
	|ИЗ
	|	Задача.бпсЗадача КАК бпсЗадача
	|ГДЕ
	|	бпсЗадача.БизнесПроцесс = &БизнесПроцессСсылка
	|	И НЕ бпсЗадача.Выполнена
	|	И ВЫБОР КОГДА &ИспользоватьОтборПоПользователю Тогда
	|		бпсЗадача.Пользователь = &Пользователь	
	|	ИНАЧЕ
	|		бпсЗадача.КлючЗадачи = &КлючЗадачи
	|	КОНЕЦ
	|";
	
	СтрокаЛистСогласования = ДопПараметры.СтрокаЛистСогласования;
	Запрос.УстановитьПараметр("БизнесПроцессСсылка", ДопПараметры.БизнесПроцесс);
	Запрос.УстановитьПараметр("КлючЗадачи", СтрокаЛистСогласования.КлючЗадачи);
	пПользователь = Неопределено;
	Если ДопПараметры.КомандаСогласования = ПредопределенноеЗначение("Перечисление.бпсКомандыСогласования.ОтправитьНаПовторноеСогласование")
		ИЛИ ДопПараметры.КомандаСогласования = ПредопределенноеЗначение("Перечисление.бпсКомандыСогласования.ПрекратитьСогласование") Тогда
		пПользователь = ПараметрыСеанса.ТекущийПользователь;
	Конецесли;
	Запрос.УстановитьПараметр("Пользователь", пПользователь);
	Запрос.УстановитьПараметр("ИспользоватьОтборПоПользователю", ЗначениеЗаполнено(пПользователь));
	
	РезультатЗапроса = Запрос.Выполнить();
	ТекстПоясненияОшибки = "РезультатЗапроса получить задачу для "
		+" КлючЗадачи ["+СтрокаЛистСогласования.КлючЗадачи+"]"
		+" Очередь ["+СтрокаЛистСогласования.Очередь+"]"
		+" Этап ["+ДопПараметры.Этап+"]"
		+" КомандаСогласования ["+ДопПараметры.КомандаСогласования+"]"
		;
	Ожидаем.Что(РезультатЗапроса.Пустой(),ТекстПоясненияОшибки).ЭтоЛожь();
	Выборка = РезультатЗапроса.Выбрать();
	Ожидаем.Что(Выборка.Количество(),"Выборка.Количество() получить задачу").Равно(1);	
	Выборка.Следующий();
	ЗадачаСсылка = Выборка.Ссылка;
	Ожидаем.Что(ЗадачаСсылка,"ЗадачаСсылка").Существует();	
	Возврат ЗадачаСсылка;
КонецФункции //ПолучитьЗадачу(ДопПараметры)

Процедура ПроверитьСтатусОбъектаСогласования(ДопПараметры) Экспорт 
	СтрокаТЗТестыДействияПользователя = Неопределено;
	Если ДопПараметры.Свойство("СтрокаТЗТестыДействияПользователя") Тогда
		СтрокаТЗТестыДействияПользователя = ДопПараметры.СтрокаТЗТестыДействияПользователя;
		Если СтрокаТЗТестыДействияПользователя.КомандаСогласования = ПредопределенноеЗначение("Перечисление.бпсКомандыСогласования.ВернутьНаДоработку") Тогда
			Sleep(1);
		Конецесли;
	Конецесли;
	
	//МенеджерБлокировки = Новый БлокировкаДанных;
	//ЭлементБлокировки = МенеджерБлокировки.Добавить("РегистрСведений.бпсСтатусыОбъектов");
	//ЭлементБлокировки.УстановитьЗначение("ОбъектБД",ДопПараметры.ОбъектБД);
	//ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	//МенеджерБлокировки.Заблокировать();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	бпсСтатусыОбъектов.Период КАК Период,
	|	бпсСтатусыОбъектов.ОбъектБД,
	|	бпсСтатусыОбъектов.ПредметСогласования,
	|	бпсСтатусыОбъектов.Статус,
	|	бпсСтатусыОбъектов.Основание
	|ИЗ
	|	РегистрСведений.бпсСтатусыОбъектов КАК бпсСтатусыОбъектов
	|ГДЕ
	|	бпсСтатусыОбъектов.ОбъектБД = &ОбъектБД
	|	И бпсСтатусыОбъектов.ПредметСогласования = &ПредметСогласования
	|
	|УПОРЯДОЧИТЬ ПО
	|	бпсСтатусыОбъектов.МоментВремени УБЫВ";
	
	Запрос.УстановитьПараметр("ОбъектБД", ДопПараметры.ОбъектБД);
	Запрос.УстановитьПараметр("ПредметСогласования", ДопПараметры.ПредметСогласования);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	РезультатЗапроса = Запрос.Выполнить();
	Ожидаем.Что(РезультатЗапроса.Пустой(), "ПроверитьСтатусОбъектаСогласования РезультатЗапроса").ЭтоЛожь();
	Выборка = РезультатЗапроса.Выбрать();
	Ожидаем.Что(Выборка.Количество(),"ПроверитьСтатусОбъектаСогласования Выборка.Количество()").Равно(1);	
	
	Выборка.Следующий();
	Если ЗначениеЗаполнено(СтрокаТЗТестыДействияПользователя) Тогда
		ТекстПоясненияОшибки = "ПроверитьСтатусОбъектаСогласования "
			+"Выборка.Статус = ["+ДопПараметры.ТребуемыйСтатус+"] "		
			+"Очередь ["+СтрокаТЗТестыДействияПользователя.Очередь+"] "
			+"Этап ["+СтрокаТЗТестыДействияПользователя.Этап+"] "
			+"КомандаСогласования ["+СтрокаТЗТестыДействияПользователя.КомандаСогласования+"] "
			;	
	Иначе
		ТекстПоясненияОшибки = "ПроверитьСтатусОбъектаСогласования "
			+"Выборка.Статус = ["+ДопПараметры.ТребуемыйСтатус+"] "		
			;				
	Конецесли;
	Ожидаем.Что(Выборка.Статус,ТекстПоясненияОшибки).Равно(ДопПараметры.ТребуемыйСтатус);
	Ожидаем.Что(Выборка.Основание,"ПроверитьСтатусОбъектаСогласования Выборка.Основание = "+ДопПараметры.ТребуемоеОснование).Равно(ДопПараметры.ТребуемоеОснование);
КонецПроцедуры

Процедура Sleep(ПаузаВСекундах = 0) Экспорт
    
    ИмяСкриптФайла = КаталогВременныхФайлов()+"\sleep.js";
    
    Если ПаузаВСекундах <= 0 Тогда
        Если НайтиФайлы(ИмяСкриптФайла).Количество() = 0 Тогда
            Скрипт=Новый ТекстовыйДокумент();
            Скрипт.УстановитьТекст(
            "if (WScript.Arguments.Count()==0)
            |    WScript.Quit();
            |else
            |    if (isNaN(parseInt(WScript.Arguments(0))))
            |        WScript.Quit();
            |WScript.Sleep(WScript.Arguments(0));");
            Скрипт.Записать(ИмяСкриптФайла,КодировкаТекста.ANSI);
        Иначе
            УдалитьФайлы(ИмяСкриптФайла);
        КонецЕсли;
        Возврат;
    Иначе
        Если НайтиФайлы(ИмяСкриптФайла).Количество() = 0 Тогда
            Sleep();
        КонецЕсли;
    КонецЕсли;
    
    Run = "wscript.exe " + "" + ИмяСкриптФайла + "" + " " + Формат(ПаузаВСекундах * 1000,"ЧДЦ=0; ЧГ=");
    Shell=Новый COMОбъект("wscript.shell");
    Shell.Run(Run,0,-1);
    Shell = Неопределено;

КонецПроцедуры

Процедура ПроверитьЛистСогласования(СтрокаТЗТесты,БизнесПроцессОбъект,ТЗТестыЛистыСогласования)
	НомерТеста = СтрокаТЗТесты.НомерТеста;
	Для каждого СтрокаЛистСогласования из БизнесПроцессОбъект.ЛистСогласования цикл
		Ожидаем.Что(СтрокаЛистСогласования.Очередь,"СтрокаЛистСогласования.Очередь").Заполнено();
		Ожидаем.Что(СтрокаЛистСогласования.КлючЗадачи,"СтрокаЛистСогласования.КлючЗадачи").Заполнено();
		Ожидаем.Что(СтрокаЛистСогласования.Согласовано,"СтрокаЛистСогласования.Согласовано").ЭтоЛожь();
		Ожидаем.Что(СтрокаЛистСогласования.Рецензия,"СтрокаЛистСогласования.Рецензия").Не_().Заполнено();
		Ожидаем.Что(СтрокаЛистСогласования.Пояснение,"СтрокаЛистСогласования.Пояснение").Заполнено();
		ПараметрыОтбора=Новый Структура();
		ПараметрыОтбора.Вставить("НомерТеста",НомерТеста);
		ПараметрыОтбора.Вставить("Очередь",СтрокаЛистСогласования.Очередь);
		НайденныеСтроки = ТЗТестыЛистыСогласования.НайтиСтроки(ПараметрыОтбора);
		ВсегоНайденныеСтроки = НайденныеСтроки.Количество();
		ТекстОшибки = "";
		Если ВсегоНайденныеСтроки = 1 тогда
			СтрокаТЗТестыЛистыСогласования = НайденныеСтроки[0];	
			
			ТекстПоясненияОшибки = "СтрокаЛистСогласования.РольАдресации = ["+СтрокаТЗТестыЛистыСогласования.РольАдресации+"]";
			Ожидаем.Что(СтрокаЛистСогласования.РольАдресации,ТекстПоясненияОшибки).Равно(СтрокаТЗТестыЛистыСогласования.РольАдресации);
			
			ТекстПоясненияОшибки = "СтрокаЛистСогласования.ПодразделениеАдресации = ["+СтрокаТЗТестыЛистыСогласования.ПодразделениеАдресации+"]";
			Ожидаем.Что(СтрокаЛистСогласования.ПодразделениеАдресации,ТекстПоясненияОшибки).Равно(СтрокаТЗТестыЛистыСогласования.ПодразделениеАдресации);			
		ИначеЕсли ВсегоНайденныеСтроки > 1 Тогда
			ТекстОшибки = "Ошибка! Найдено более 1 строки";
		Иначе
			ТекстОшибки = "Ошибка! Не найдена строка";
		Конецесли;
		
		Если ЗначениеЗаполнено(ТекстОшибки) Тогда
			ТекстОшибки = ТекстОшибки  
				+" в ""ТЗТестыЛистыСогласования"" для ";
			Для каждого ЭлементОтбора из ПараметрыОтбора цикл
				ТекстОшибки = ТекстОшибки  
					+" "+ ЭлементОтбора.Ключ + " = "+ЭлементОтбора.Значение;				
			Конеццикла;
			ВызватьИсключение ТекстОшибки;	
		Конецесли;
	Конеццикла;
КонецПроцедуры 

Процедура ПроверитьЗаполненыЛиЯчейкиВТЗ(ТЗПроверяемая,ИмяТЧ,ИсключаемыеКолонки = Неопределено)
	Колонки = ТЗПроверяемая.Колонки;
	НомерРяда = 1;
	УказаныИсключаемыеКолонки = ЗначениеЗаполнено(ИсключаемыеКолонки);
	Для каждого СтрокаТЗПроверяемая из ТЗПроверяемая цикл
		Для каждого Колонка из Колонки цикл
			ИмяКолонки= Колонка.Имя;
			Если УказаныИсключаемыеКолонки 
				И Найти(ИсключаемыеКолонки,ИмяКолонки) > 0 Тогда
				Продолжить;
			Конецесли;
			ЗначениеЯчейки = СтрокаТЗПроверяемая[ИмяКолонки];
			ТексОшибки = "Не заполнение ЗначениеЯчейки ряд ["+НомерРяда+"] колонка ["+ИмяКолонки+"] ИмяТЧ ["+ИмяТЧ+"]";
			Ожидаем.Что(ЗначениеЯчейки,ТексОшибки).Заполнено();	
		Конеццикла;		
		НомерРяда = НомерРяда + 1;
	Конеццикла;
КонецПроцедуры 

Функция ЗагрузитьТЗТестыДействияПользователя(мТЗПоискКэш,КоличествоСтрокВДействияхПользователя) 
	ТЗТестыДействияПользователя = Новый ТаблицаЗначений();
	ТЗТестыДействияПользователя.Колонки.Добавить("НомерТеста",Новый ОписаниеТипов("Число"));
	ТЗТестыДействияПользователя.Колонки.Добавить("Очередь",Новый ОписаниеТипов("Число"));
	ТЗТестыДействияПользователя.Колонки.Добавить("Этап",Новый ОписаниеТипов("Число"));
	ТЗТестыДействияПользователя.Колонки.Добавить("КомандаСогласования",Новый ОписаниеТипов("ПеречислениеСсылка.бпсКомандыСогласования"));
	ТЗТестыДействияПользователя.Колонки.Добавить("СтатусПослеВыполненияКоманды",Новый ОписаниеТипов("СправочникСсылка.бпсСтатусыОбъектов"));
	ТЗТестыДействияПользователя.Колонки.Добавить("КоличествоУведомлений",Новый ОписаниеТипов("Число"));
	ТЗТестыДействияПользователя.Колонки.Добавить("Рецензия",Новый ОписаниеТипов("Строка"));
	
	
	Макет = ПолучитьМакет("Тесты_ДействияПользователей");
	КоличествоСтрокВДействияхПользователя = Макет.ВысотаТаблицы - 1;
	Для НомерСтроки = 2 По Макет.ВысотаТаблицы Цикл
		НомерТеста = Число(СокрЛП(Макет.Область(НомерСтроки,1).Текст));
		Очередь = Число(СокрЛП(Макет.Область(НомерСтроки,2).Текст));
		Этап = Число(СокрЛП(Макет.Область(НомерСтроки,3).Текст));
		
		КомандаСогласованияТекст = СокрЛП(Макет.Область(НомерСтроки,4).Текст);
		пКомандаСогласования = ПолучитьСсылкуНаОбъект(мТЗПоискКэш,"ПеречислениеСсылка.бпсКомандыСогласования","Наименование",КомандаСогласованияТекст);
		
		СтатусПослеВыполненияКомандыТекст = СокрЛП(Макет.Область(НомерСтроки,5).Текст);
		пСтатусПослеВыполненияКоманды = ПолучитьСсылкуНаОбъект(мТЗПоискКэш,"СправочникСсылка.бпсСтатусыОбъектов","Наименование",СтатусПослеВыполненияКомандыТекст);
		
		КоличествоУведомлений = Число(СокрЛП(Макет.Область(НомерСтроки,6).Текст));
		Рецензия = СокрЛП(Макет.Область(НомерСтроки,7).Текст);
		
		
		СтрокаТЗТестыДействияПользователя = ТЗТестыДействияПользователя.Добавить();
		СтрокаТЗТестыДействияПользователя.НомерТеста = НомерТеста;
		СтрокаТЗТестыДействияПользователя.Очередь = Очередь;
		СтрокаТЗТестыДействияПользователя.Этап = Этап;
		СтрокаТЗТестыДействияПользователя.КомандаСогласования = пКомандаСогласования;
		СтрокаТЗТестыДействияПользователя.СтатусПослеВыполненияКоманды = пСтатусПослеВыполненияКоманды;
		СтрокаТЗТестыДействияПользователя.КоличествоУведомлений = КоличествоУведомлений;
		СтрокаТЗТестыДействияПользователя.Рецензия = Рецензия;
	КонецЦикла;	
	Возврат ТЗТестыДействияПользователя;
	
КонецФункции 

Функция ЗагрузитьТЗТестыЛистыСогласования(мТЗПоискКэш,КоличествоСтрокВЛистахСогласования) 
	
	ТЗТестыЛистыСогласования = Новый ТаблицаЗначений();
	ТЗТестыЛистыСогласования.Колонки.Добавить("НомерТеста",Новый ОписаниеТипов("Число"));
	ТЗТестыЛистыСогласования.Колонки.Добавить("Очередь",Новый ОписаниеТипов("Число"));
	ТЗТестыЛистыСогласования.Колонки.Добавить("РольАдресации",Новый ОписаниеТипов("СправочникСсылка.бпсРолиАдресации"));
	ТЗТестыЛистыСогласования.Колонки.Добавить("ПодразделениеАдресации",Новый ОписаниеТипов("СправочникСсылка.бпсПодразделенияАдресации"));
	
	Макет = ПолучитьМакет("Тесты_ЛистыСогласования");
	КоличествоСтрокВЛистахСогласования = Макет.ВысотаТаблицы - 1;
	Для НомерСтроки = 2 По Макет.ВысотаТаблицы Цикл
		НомерТеста = Число(СокрЛП(Макет.Область(НомерСтроки,1).Текст));
		Очередь = Число(СокрЛП(Макет.Область(НомерСтроки,2).Текст));
		
		РольАдресацииТекст = СокрЛП(Макет.Область(НомерСтроки,3).Текст);
		пРольАдресации = ПолучитьСсылкуНаОбъект(мТЗПоискКэш,"СправочникСсылка.бпсРолиАдресации","Наименование",РольАдресацииТекст);
		
		ПодразделениеАдресацииТекст = СокрЛП(Макет.Область(НомерСтроки,4).Текст);
		пПодразделениеАдресации = ПолучитьСсылкуНаОбъект(мТЗПоискКэш,"СправочникСсылка.бпсПодразделенияАдресации","Наименование",ПодразделениеАдресацииТекст);
		
		СтрокаТЗТестыЛистыСогласования = ТЗТестыЛистыСогласования.Добавить();
		СтрокаТЗТестыЛистыСогласования.НомерТеста = НомерТеста;
		СтрокаТЗТестыЛистыСогласования.Очередь = Очередь;
		СтрокаТЗТестыЛистыСогласования.РольАдресации = пРольАдресации;
		СтрокаТЗТестыЛистыСогласования.ПодразделениеАдресации = пПодразделениеАдресации;
	КонецЦикла;	
	Возврат ТЗТестыЛистыСогласования;
КонецФункции 


Функция ЗагрузитьТЗТесты(мТЗПоискКэш,КоличествоТестов) 
	
	ТЗТесты = Новый ТаблицаЗначений();
	ТЗТесты.Колонки.Добавить("НомерТеста",Новый ОписаниеТипов("Число"));
	ТЗТесты.Колонки.Добавить("ТипОбъекта",Новый ОписаниеТипов("СправочникСсылка.бпсТипыОбъектовБД"));
	ТЗТесты.Колонки.Добавить("ПредметСогласования",Новый ОписаниеТипов("СправочникСсылка.бпсПредметыСогласований"));
	ТЗТесты.Колонки.Добавить("ОбъектБД",Новый ОписаниеТипов("СправочникСсылка._ДоговорыКонтрагентов"));
	ТЗТесты.Колонки.Добавить("СтатусПослеОкончанияСогласования",Новый ОписаниеТипов("СправочникСсылка.бпсСтатусыОбъектов"));
	ТЗТесты.Колонки.Добавить("ЗаблокированОбъектПослеЗавершения",Новый ОписаниеТипов("Булево"));
	
	
	Макет = ПолучитьМакет("Тесты");
	КоличествоТестов = Макет.ВысотаТаблицы - 1;
	Для НомерСтроки = 2 По Макет.ВысотаТаблицы Цикл		
		НомерТеста = Число(СокрЛП(Макет.Область(НомерСтроки,1).Текст));
		
		ТипОбъектаТекст = СокрЛП(Макет.Область(НомерСтроки,2).Текст);
		
		пТипОбъекта = ПолучитьСсылкуНаОбъект(мТЗПоискКэш,"СправочникСсылка.бпсТипыОбъектовБД","Наименование",ТипОбъектаТекст);
		
		ПредметСогласованияТекст = СокрЛП(Макет.Область(НомерСтроки,3).Текст);
		пПредметСогласования = ПолучитьСсылкуНаОбъект(мТЗПоискКэш,"СправочникСсылка.бпсПредметыСогласований","Наименование",ПредметСогласованияТекст);
		
		ОбъектБДТекст = СокрЛП(Макет.Область(НомерСтроки,4).Текст);
		пОбъектБД = ПолучитьСсылкуНаОбъект(мТЗПоискКэш,"СправочникСсылка._ДоговорыКонтрагентов","Наименование",ОбъектБДТекст);
		
		СтатусПослеОкончанияСогласованияТекст = СокрЛП(Макет.Область(НомерСтроки,5).Текст);
		пСтатусПослеОкончанияСогласования = ПолучитьСсылкуНаОбъект(мТЗПоискКэш,"СправочникСсылка.бпсСтатусыОбъектов","Наименование",СтатусПослеОкончанияСогласованияТекст);
		
		пЗаблокированОбъектПослеЗавершения = Неопределено;
		пЗаблокированОбъектПослеЗавершенияТекст = СокрЛП(Макет.Область(НомерСтроки,6).Текст);
		Если пЗаблокированОбъектПослеЗавершенияТекст = "Истина" Тогда
			пЗаблокированОбъектПослеЗавершения = Истина;
		ИначеЕсли пЗаблокированОбъектПослеЗавершенияТекст = "Ложь" Тогда
			пЗаблокированОбъектПослеЗавершения = Ложь;
		Иначе
			ВызватьИсключение "Ошибка! ожидаем Истину или Ложь в колонке ЗаблокированОбъектПослеЗавершения";
		Конецесли;
		
		СтрокаТЗТесты = ТЗТесты.Добавить();
		СтрокаТЗТесты.НомерТеста = НомерТеста;
		СтрокаТЗТесты.ТипОбъекта = пТипОбъекта;
		СтрокаТЗТесты.ПредметСогласования = пПредметСогласования;
		СтрокаТЗТесты.ОбъектБД = пОбъектБД;
		СтрокаТЗТесты.СтатусПослеОкончанияСогласования = пСтатусПослеОкончанияСогласования;
		СтрокаТЗТесты.ЗаблокированОбъектПослеЗавершения = пЗаблокированОбъектПослеЗавершения;
	КонецЦикла;	
	Возврат ТЗТесты;
КонецФункции 

Функция СоздатьСтруктурумТЗПоискКэш() Экспорт
	мТЗПоискКэш = Новый ТаблицаЗначений();
	мТЗПоискКэш.Колонки.Добавить("МетаданныеИмя");
	мТЗПоискКэш.Колонки.Добавить("Наименование");
	мТЗПоискКэш.Колонки.Добавить("ЭтоГруппа");
	мТЗПоискКэш.Колонки.Добавить("Ссылка");
	
	мТЗПоискКэш.Индексы.Добавить("МетаданныеИмя");
	Возврат мТЗПоискКэш;
КонецФункции

Функция ПолучитьЗначениеИзКэша(мТЗПоискКэш,МетаданныеИмя,ПараметрыПоиска) Экспорт
	РезультатФункции = Новый Структура();
	пЗначениеИзКэша = Неопределено;
	ЭтоЗначениеИзКэша = Ложь;	
	ПараметрыОтбора=Новый Структура();
	ПараметрыОтбора.Вставить("МетаданныеИмя",МетаданныеИмя);
	ПараметрыПойскаСтрока = "";
	Для каждого СтрокаПараметрыПоиска из ПараметрыПоиска цикл
		ПараметрыОтбора.Вставить(СтрокаПараметрыПоиска.Ключ,СтрокаПараметрыПоиска.Значение);
		ПараметрыПойскаСтрока = ПараметрыПойскаСтрока + "" +СтрокаПараметрыПоиска.Ключ + " ["+СтрокаПараметрыПоиска.Значение+"]";
	Конеццикла;
	НайденныеСтроки = мТЗПоискКэш.НайтиСтроки(ПараметрыОтбора);
	Если НайденныеСтроки.Количество()=1 тогда
		пЗначениеИзКэша = НайденныеСтроки[0].Ссылка;
		ЭтоЗначениеИзКэша = Истина;
	ИначеЕсли НайденныеСтроки.Количество()>1 Тогда
		Сообщить("Ошибка! Найдено более 1 значения в кэше МетаданныеИмя ["+МетаданныеИмя+"] по указанным параметрам поиска"
			+" "+ПараметрыПойскаСтрока);
	Иначе
		//Сообщить("Не найден ");		
	Конецесли;
	РезультатФункции.Вставить("ЭтоЗначениеИзКэша",ЭтоЗначениеИзКэша);
	РезультатФункции.Вставить("ЗначениеИзКэша",пЗначениеИзКэша);
	Возврат РезультатФункции;	
КонецФункции //ПолучитьЗначениеИзКэша(ДопПараметры)

Процедура ДобавитьЗначениеВКэш(мТЗПоискКэш,СсылкаНаОбъект,МетаданныеИмя,ПараметрыПоиска) Экспорт
	СтрокамТЗПоискКэш = мТЗПоискКэш.Добавить();
	ЗаполнитьЗначенияСвойств(СтрокамТЗПоискКэш,ПараметрыПоиска);
	СтрокамТЗПоискКэш.Ссылка = СсылкаНаОбъект;
	СтрокамТЗПоискКэш.МетаданныеИмя = МетаданныеИмя;
КонецПроцедуры //ДобавитьЗначениеВКэш(Справочники.Модели.ПустаяСсылка(),"Модели",ПараметрыПоиска)

Функция ПолучитьСсылкуНаОбъект(мТЗПоискКэш,МетаданныеИмя,КлючПоиска,ЗначениеДляПоиска) Экспорт 
	пСсылкаНаОбъект = Неопределено;

	ПараметрыПоиска = Новый Структура();
	ПараметрыПоиска.Вставить(КлючПоиска,ЗначениеДляПоиска);
	РезультатФункции = ПолучитьЗначениеИзКэша(мТЗПоискКэш,МетаданныеИмя,ПараметрыПоиска);	
	Если РезультатФункции.ЭтоЗначениеИзКэша Тогда
		пСсылкаНаОбъект = РезультатФункции.ЗначениеИзКэша;
		Возврат пСсылкаНаОбъект;
	Конецесли;
	Если НЕ ЗначениеЗаполнено(ЗначениеДляПоиска) Тогда
		ДобавитьЗначениеВКэш(мТЗПоискКэш,пСсылкаНаОбъект,МетаданныеИмя,ПараметрыПоиска);		
		Возврат пСсылкаНаОбъект;
	Конецесли;
	
	Если МетаданныеИмя = "ПеречислениеСсылка.бпсКомандыСогласования" Тогда
		пСсылкаНаОбъект = ПредопределенноеЗначение("Перечисление.бпсКомандыСогласования."+ЗначениеДляПоиска);
		ДобавитьЗначениеВКэш(мТЗПоискКэш,пСсылкаНаОбъект,МетаданныеИмя,ПараметрыПоиска);	
	ИначеЕсли МетаданныеИмя = "СправочникСсылка.бпсСтатусыОбъектов" Тогда
		пСсылкаНаОбъект = ПредопределенноеЗначение("Справочник.бпсСтатусыОбъектов."+ЗначениеДляПоиска);
		ДобавитьЗначениеВКэш(мТЗПоискКэш,пСсылкаНаОбъект,МетаданныеИмя,ПараметрыПоиска);			
	Иначе
		Запрос = Новый Запрос;
		Запрос.Текст = ПолучитьТекстЗапросаДляПоиска(МетаданныеИмя);	 
		Запрос.УстановитьПараметр(КлючПоиска, ЗначениеДляПоиска);
		РезультатЗапроса = Запрос.Выполнить();

		пСсылкаНаОбъект = ПолучитьЗначениеИзЗапроса(мТЗПоискКэш,РезультатЗапроса,МетаданныеИмя,ПараметрыПоиска);
	Конецесли;
	Возврат пСсылкаНаОбъект;
	
КонецФункции //ПолучитьСсылкуНаОбъект()

Функция ПолучитьТекстЗапросаДляПоиска(МетаданныеИмя) Экспорт 
	ТекстЗапроса = Неопределено;
	Если МетаданныеИмя = "СправочникСсылка.бпсТипыОбъектовБД" Тогда
		ТекстЗапроса = "
		|ВЫБРАТЬ
		|	бпсТипыОбъектовБД.Ссылка,
		|	бпсТипыОбъектовБД.Наименование
		|ИЗ
		|	Справочник.бпсТипыОбъектовБД КАК бпсТипыОбъектовБД
		|ГДЕ
		|	бпсТипыОбъектовБД.Наименование = &Наименование	
		|";
	ИначеЕсли МетаданныеИмя = "СправочникСсылка._ДоговорыКонтрагентов" Тогда
		ТекстЗапроса = "
		|ВЫБРАТЬ
		|	_ДоговорыКонтрагентов.Ссылка,
		|	_ДоговорыКонтрагентов.Наименование
		|ИЗ
		|	Справочник._ДоговорыКонтрагентов КАК _ДоговорыКонтрагентов
		|ГДЕ
		|	_ДоговорыКонтрагентов.Наименование = &Наименование
		|";
	ИначеЕсли МетаданныеИмя = "СправочникСсылка.бпсРолиАдресации" Тогда
		ТекстЗапроса = "ВЫБРАТЬ
		|	бпсРолиАдресации.Ссылка,
		|	бпсРолиАдресации.Наименование
		|ИЗ
		|	Справочник.бпсРолиАдресации КАК бпсРолиАдресации
		|ГДЕ
		|	бпсРолиАдресации.Наименование = &Наименование";	
	ИначеЕсли МетаданныеИмя = "СправочникСсылка.бпсПодразделенияАдресации" Тогда
		ТекстЗапроса = "ВЫБРАТЬ
		|	бпсПодразделенияАдресации.Ссылка,
		|	бпсПодразделенияАдресации.Наименование
		|ИЗ
		|	Справочник.бпсПодразделенияАдресации КАК бпсПодразделенияАдресации
		|ГДЕ
		|	бпсПодразделенияАдресации.Наименование = &Наименование";				
	ИначеЕсли МетаданныеИмя = "СправочникСсылка.бпсПредметыСогласований" Тогда
		ТекстЗапроса = "ВЫБРАТЬ
		|	бпсПредметыСогласований.Ссылка,
		|	бпсПредметыСогласований.Наименование
		|ИЗ
		|	Справочник.бпсПредметыСогласований КАК бпсПредметыСогласований
		|ГДЕ
		|	бпсПредметыСогласований.Наименование = &Наименование";						
	Иначе
		ВызватьИсключение "Ошибка! Нет текста запроса для поиска"+МетаданныеИмя;
	Конецесли;
	Возврат ТекстЗапроса;	
КонецФункции //ПолучитьТекстЗапросаДляПоиска()

Функция ПолучитьЗначениеИзЗапроса(мТЗПоискКэш,РезультатЗапроса,МетаданныеИмя,ПараметрыПоиска) Экспорт 
	пЗначениеИзЗапроса = Неопределено;
	Выборка = РезультатЗапроса.Выбрать();
	ВыборкаКоличество = Выборка.Количество();
	Если ВыборкаКоличество = 0 Тогда		
		ДобавитьЗначениеВКэш(мТЗПоискКэш,Неопределено,МетаданныеИмя,ПараметрыПоиска);
		ТекстОшибки = "ВНИМАНИЕ! Не найдена "+МетаданныеИмя + Символы.ПС;
		Для каждого ЭлПараметрыПоиска из ПараметрыПоиска цикл
			ТекстОшибки = ТекстОшибки + " - Ключ "+ЭлПараметрыПоиска.Ключ + " Значение ["+ЭлПараметрыПоиска.Значение+"]" + Символы.ПС;
		Конеццикла;
		Сообщить(ТекстОшибки);
	ИначеЕсли ВыборкаКоличество > 1 Тогда
		ТекстОшибки = "ВНИМАНИЕ! Найдено более 1 "+МетаданныеИмя + Символы.ПС;
		Для каждого ЭлПараметрыПоиска из ПараметрыПоиска цикл
			ТекстОшибки = ТекстОшибки + " - Ключ "+ЭлПараметрыПоиска.Ключ + " Значение ["+ЭлПараметрыПоиска.Значение+"]" + Символы.ПС;
		Конеццикла;
		Сообщить(ТекстОшибки);
		Пока Выборка.Следующий() Цикл
			ДобавитьЗначениеВКэш(мТЗПоискКэш,Неопределено,МетаданныеИмя,ПараметрыПоиска);
		КонецЦикла;		
	Иначе
		Выборка.Следующий();
		пЗначениеИзЗапроса = Выборка.Ссылка;
		ДобавитьЗначениеВКэш(мТЗПоискКэш,пЗначениеИзЗапроса,МетаданныеИмя,ПараметрыПоиска);
	Конецесли;
	Возврат пЗначениеИзЗапроса;
КонецФункции //ПолучитьЗначениеИзЗапроса()

Процедура ПередЗапускомТеста() Экспорт
	НачатьТранзакцию();
КонецПроцедуры

Процедура ПослеЗапускаТеста() Экспорт
	Если ТранзакцияАктивна() Тогда
		ОтменитьТранзакцию();
	КонецЕсли;
КонецПроцедуры
