Перем КонтекстЯдра;
Перем Утверждения;
Перем ГенераторТестовыхДанных;
Перем УтвержденияПроверкаТаблиц;
Перем Ожидаем;
Перем СериализаторMXL;

Процедура Инициализация(КонтекстЯдраПараметр) Экспорт
    КонтекстЯдра = КонтекстЯдраПараметр;
    //Утверждения = КонтекстЯдра.Плагин("БазовыеУтверждения");
	Ожидаем = КонтекстЯдра.Плагин("УтвержденияBDD");
    ГенераторТестовыхДанных = КонтекстЯдра.Плагин("СериализаторMXL");
    //УтвержденияПроверкаТаблиц = КонтекстЯдра.Плагин("УтвержденияПроверкаТаблиц");
КонецПроцедуры

Процедура ЗаполнитьНаборТестов(НаборТестов) Экспорт
	
	НаборТестов.Добавить("ТестДолжен_СоздатьСправочник_бпсТипыОбъектовБД");
	НаборТестов.Добавить("ТестДолжен_СоздатьСправочник_бпсУсловия");
	НаборТестов.Добавить("ТестДолжен_СоздатьСправочник_бпсРолиАдресации");
	НаборТестов.Добавить("ТестДолжен_СоздатьСправочник_бпсПодразделенияАдресации");
	НаборТестов.Добавить("ТестДолжен_СоздатьСправочник_бпсПредметыСогласований");
	//НаборТестов.Добавить("ТестДолжен_СоздатьСправочник_бпсМаршрутыСогласований");
	НаборТестов.Добавить("ТестДолжен_СоздатьСправочник__ДоговорыКонтрагентов");
	НаборТестов.Добавить("ТестДолжен_ЗаполнитьРегистрСведений_бпсРегистрАдресации");
	НаборТестов.Добавить("ТестДолжен_ЗаполнитьРегистрСведений_бпсНастройкиПользователей");
	НаборТестов.Добавить("ТестДолжен_ОтправитьСообщенияРегламентнымЗаданием");
	
	НаборТестов.Добавить("ТестДолжен_ОтправитьСообщениеИзРССообщения");	
	НаборТестов.Добавить("ТестДолжен_ПроверитьПолныйЦикл_бпсСогласование");	
	НаборТестов.Добавить("ТестДолжен_СоздатьЗаписьВРегистрАдресации");
	НаборТестов.Добавить("ТестДолжен_СоздатьИЗаполнитьПредметСогласования");
	НаборТестов.Добавить("ТестДолжен_СоздатьЗадачу");
	НаборТестов.Добавить("ТестДолжен_ПровестиРегистрациюСтатусаОбъекта");
	НаборТестов.Добавить("ТестДолжен_СоздатьПодразделение_Заблокировать_ПроверитьМожноЛиПрограммноЕгоИзменить");	
	
	//НаборТестов.Добавить("ТестДолжен_ПроверитьОбработку_бпсСтатусыСогласований");	
КонецПроцедуры

Процедура ТестДолжен_ПроверитьОбработку_бпсСтатусыСогласований() Экспорт
	//ТестовыеДанныебпсТипыОбъектовБД = Загрузить_бпсТипыОбъектовБД();
	//ТестовыеДанныебпсУсловия = Создать_бпсУсловия();	
	//ТестовыеДанныеРолиАдресации = Загрузить_бпсРолиАдресации();
	//ТестовыеДанныеПодразделенияАдресации = Загрузить_бпсПодразделенияАдресации();	
	//ТестовыеДанныебпсПредметыСогласований = Загрузить_бпсПредметыСогласований();
	////ТестовыеДанныебпсМаршрутыСогласований = Загрузить_бпсМаршрутыСогласований();
	//ТестовыеДанныебпсРегистрАдресации = Загрузить_бпсРегистрАдресации();
	//ТестовыеДанныебпсНастройкиПользователей = Загрузить_бпсНастройкиПользователей();
	//ТестовыеДанныеДоговорыКонтрагентов = Загрузить__ДоговорыКонтрагентов();
	//
	//ЗаполнитьСистемнуюУчетнаяЗаписьЭлектроннойПочты();
	//
	//
	//ПредметСогласования = ТестовыеДанныебпсПредметыСогласований.ПредметСогласования_Договор;
	//пОбъектБД = ТестовыеДанныеДоговорыКонтрагентов.Договор_Основной;
	//МаршрутСогласования = ТестовыеДанныебпсМаршрутыСогласований.МаршрутСогласования_Договора;
	//
	//ОбработкаОбъект = Обработки.бпсСтатусыСогласований.Создать();
	//ОбработкаОбъект.ОбъектБД = пОбъектБД;
	//ОбработкаОбъект.ЗаполнитьПоОбъектуБД();
	//
	//Ожидаем.Что(ОбработкаОбъект.ТекущийНомерОчереди,"ОбработкаОбъект.ТекущийНомерОчереди").Равно(1);
	//Ожидаем.Что(ОбработкаОбъект.СтатусыСогласований.Количество(),"ОбработкаОбъект.СтатусыСогласований.Количество()").Равно(1);
	//
	//СтрокаСтатусыСогласований_0 = ОбработкаОбъект.СтатусыСогласований[0];
	//Ожидаем.Что(СтрокаСтатусыСогласований_0.Очередь,"СтрокаСтатусыСогласований_0.Очередь").Равно(1);
	//Ожидаем.Что(СтрокаСтатусыСогласований_0.ПредметСогласования,"СтрокаСтатусыСогласований_0.ПредметСогласования").Равно(ПредметСогласования);
	//Ожидаем.Что(СтрокаСтатусыСогласований_0.Статус,"СтрокаСтатусыСогласований_0.Статус").Равно(Справочники.бпсСтатусыОбъектов.Согласование_НеУтверждено);
	//Ожидаем.Что(СтрокаСтатусыСогласований_0.Согласование,"СтрокаСтатусыСогласований_0.Согласование").Не_().Заполнено();
	//Ожидаем.Что(СтрокаСтатусыСогласований_0.ТребуетсяСогласование,"СтрокаСтатусыСогласований_0.ТребуетсяСогласование").ЭтоИстина();
	
КонецПроцедуры //ТестДолжен_ПроверитьОбработку_бпсСтатусыСогласований

Процедура ТестДолжен_СоздатьСправочник_бпсУсловия() Экспорт
	ТестовыеДанныеТипыОбъектов = Загрузить_бпсТипыОбъектовБД();
	ТестовыеДанныебпсУсловия = Создать_бпсУсловия(ТестовыеДанныеТипыОбъектов);
	ТестовыеДанные_ДоговорыКонтрагентов = Загрузить__ДоговорыКонтрагентов();
	Договор_Основной = ТестовыеДанные_ДоговорыКонтрагентов.Договор_Основной;
	
	Условие_0 = ТестовыеДанныебпсУсловия.Условие_0;
	Условие_1 = ТестовыеДанныебпсУсловия.Условие_1;
	
	ДопПараметры = Новый Структура();
	ДопПараметры.Вставить("ОбъектБД",Договор_Основной);
	ДопПараметры.Вставить("Условие",Условие_0);
	пУсловие_0Выполнено = Справочники.бпсУсловия.УсловиеВыполнено(ДопПараметры,Ложь);
	Ожидаем.Что(пУсловие_0Выполнено,"пУсловие_0Выполнено").ЭтоЛожь();	
	
	ДопПараметры = Новый Структура();
	ДопПараметры.Вставить("ОбъектБД",Договор_Основной);
	ДопПараметры.Вставить("Условие",Условие_1);
	пУсловие1Выполнено = Справочники.бпсУсловия.УсловиеВыполнено(ДопПараметры,Ложь);
	Ожидаем.Что(пУсловие1Выполнено,"пУсловие1Выполнено").ЭтоИстина();
КонецПроцедуры //ТестДолжен_СоздатьСправочник_бпсТипыОбъектовБД

Функция Создать_бпсУсловия(ТестовыеДанныеТипыОбъектов) Экспорт 
	ТестовыеДанные = Неопределено;
	ТипОбъекта_0 = ТестовыеДанныеТипыОбъектов.ТипОбъекта_0;
	СпрОбъект = Справочники.бпсУсловия.СоздатьЭлемент();
	СпрОбъект.Владелец = ТипОбъекта_0;
	Ожидаем.Что(СпрОбъект.Владелец,"СпрОбъект.Владелец").Заполнено();
	
	КомпоновщикНастроекКомпоновкиДанных = Новый КомпоновщикНастроекКомпоновкиДанных;
	МакетСКД = Справочники.бпсУсловия.ПолучитьМакетСКДДляТипаОбъектаБД(СпрОбъект.Владелец);
	
	//АдресВременногоХранилищаМакетаСКД = ПоместитьВоВременноеХранилище(МакетСКД,Новый УникальныйИдентификатор());
	
	//ИсточникНастроек = Новый ИсточникДоступныхНастроекКомпоновкиДанных(АдресВременногоХранилищаМакетаСКД);
	ИсточникНастроек = Новый ИсточникДоступныхНастроекКомпоновкиДанных(МакетСКД);
	
	КомпоновщикНастроекКомпоновкиДанных.Инициализировать(ИсточникНастроек);
	КомпоновщикНастроекКомпоновкиДанных.ЗагрузитьНастройки(МакетСКД.НастройкиПоУмолчанию);
	
	пНастройкиКомпоновщика = КомпоновщикНастроекКомпоновкиДанных.Настройки;	
	ЭлементыОтбора = пНастройкиКомпоновщика.Отбор.Элементы;
	
	ЭлементОтбора = ЭлементыОтбора.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("УсловныеЕдиницы");
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.ПравоеЗначение = Ложь;
	
	ЭлементОтбора = ЭлементыОтбора.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Менеджер");
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.ПравоеЗначение = ПараметрыСеанса.ТекущийПользователь;	
	
	СпрОбъект.Код = "п00000001";
	СпрОбъект.АдресВременногоХранилища = ПоместитьВоВременноеХранилище(КомпоновщикНастроекКомпоновкиДанных.Настройки,Новый УникальныйИдентификатор());
	СпрОбъект.Наименование = "" + КомпоновщикНастроекКомпоновкиДанных.Настройки.Отбор;
	СпрОбъект.Записать();                                                      
	Условие_0 = СпрОбъект.Ссылка;
	Ожидаем.Что(Условие_0.ТекстЗапроса,"Условие_0.ТекстЗапроса").Заполнено();
	
	пНастройкиКомпоновщика = Условие_0.НастройкиКомпоновщикаХранилище.Получить();
	ЭлементыОтбора = пНастройкиКомпоновщика.Отбор.Элементы;
	Ожидаем.Что(ЭлементыОтбора.Количество(),"ЭлементыОтбора.Количество()").Равно(2);
	
	СпрОбъект = Справочники.бпсУсловия.СоздатьЭлемент();
	СпрОбъект.Владелец = ТипОбъекта_0;
	Ожидаем.Что(СпрОбъект.Владелец,"СпрОбъект.Владелец").Заполнено();
	СпрОбъект.Наименование = "Произвольное условие: НЕ ОбъектБД.ПометкаУдаления";
	СпрОбъект.Код = "п00000002";
	СпрОбъект.ПроизвольноеУсловие = Истина;
	СпрОбъект.ТекстПроизвольногоУсловия = "Результат = НЕ ОбъектБД.ПометкаУдаления";
	СпрОбъект.Записать();
	
	Условие_1 = СпрОбъект.Ссылка;	
	Ожидаем.Что(Условие_1, "Условие_1").Существует();
	Ожидаем.Что(Условие_1.ТекстЗапроса,"Условие_1.ТекстЗапроса").Не_().Заполнено();
	
	ТестовыеДанные = Новый Структура();
	ТестовыеДанные.Вставить("Условие_0",Условие_0);
	ТестовыеДанные.Вставить("Условие_1",Условие_1);
	Возврат ТестовыеДанные;	
КонецФункции //Создать_бпсУсловия()

Процедура ТестДолжен_СоздатьСправочник_бпсТипыОбъектовБД() Экспорт
	ТестовыеДанные = Загрузить_бпсТипыОбъектовБД();
	Проверить_бпсТипыОбъектовБД(ТестовыеДанные);

КонецПроцедуры //ТестДолжен_СоздатьСправочник_бпсТипыОбъектовБД

Функция Загрузить_бпсТипыОбъектовБД()
	//Макет = ПолучитьМакет("Справочник_бпсТипыОбъектовБД"); //использую макет из этой же внешней обработки
	//ТестовыеДанные = ГенераторТестовыхДанных.СоздатьДанныеПоТабличномуДокументу(Макет);	
	//
	ТестовыеДанные = Новый Структура();
	ТестовыеДанные.Вставить("ТипОбъекта_0",Справочники.бпсТипыОбъектовБД.НайтиПоНаименованию("Объект [Договоры контрагентов]"));
	Возврат ТестовыеДанные;
КонецФункции
Процедура Проверить_бпсТипыОбъектовБД(ТестовыеДанные) Экспорт
	Ожидаем.Что(ТестовыеДанные, "ЭтоСтруктура").ИмеетТип("Структура");
	Ожидаем.Что(ТестовыеДанные.Количество(),"ТестовыеДанные.Количество()").Равно(1);
	Ожидаем.Что(ТестовыеДанные.Свойство("ТипОбъекта_0"),"Ожидали, что есть переменная 'ТипОбъекта_0'").ЭтоИстина();
	ТипОбъекта_0 = ТестовыеДанные.ТипОбъекта_0;
	Ожидаем.Что(ТипОбъекта_0,"ТипОбъекта_0").ИмеетТип(Тип("СправочникСсылка.бпсТипыОбъектовБД"));
	
	Ожидаем.Что(ТипОбъекта_0.Наименование,"ТипОбъекта_0.Наименование").Заполнено().Равно("Объект [Договоры контрагентов]");
	Ожидаем.Что(ТипОбъекта_0.ОбъектБДСиноним,"ТипОбъекта_0.ОбъектБДСиноним").Заполнено().Равно("Договоры контрагентов");
	Ожидаем.Что(ТипОбъекта_0.ОбъектБДИмяМетаданных,"ТипОбъекта_0.ОбъектБДИмяМетаданных").Заполнено().Равно("_ДоговорыКонтрагентов");
	Ожидаем.Что(ТипОбъекта_0.МенеджерОбъекта,"ТипОбъекта_0.МенеджерОбъекта").Заполнено().Равно("Справочники");
	
КонецПроцедуры //Проверить_бпсПредметыСогласований(ТестовыеДанные)



Процедура ТестДолжен_ОтправитьСообщенияРегламентнымЗаданием() Экспорт
	ТестовыеДанные = Загрузить_РС_бпсСообщения();
	Проверить_РС_бпсСообщения(ТестовыеДанные);
	
	РегистрыСведений.бпсСообщения.ОтправитьСообщения();
	НомерЗаписи = 0;
	Для каждого СтрокаТестовыеДанные из ТестовыеДанные цикл
		НаборЗаписей0 = ТестовыеДанные["бпсСообщения_" + НомерЗаписи];
		Ожидаем.Что(НаборЗаписей0,"НаборЗаписей0").ИмеетТип(Тип("РегистрСведенийНаборЗаписей.бпсСообщения"));
		
		ЗаписьбпсСообщения = НаборЗаписей0[0];
		
		ИдентификаторСообщения = ЗаписьбпсСообщения.ИдентификаторСообщения;
		
		РезультатЗапроса_бпсСообщения = ПолучитьРезультатЗапроса_РССообщения(ИдентификаторСообщения);
		
		Ожидаем.Что(РезультатЗапроса_бпсСообщения.Пустой(),"РезультатЗапроса_бпсСообщения").ЭтоЛожь();
		ВыборкаРС_бпсСообщения = РезультатЗапроса_бпсСообщения.Выбрать();
		Ожидаем.Что(ВыборкаРС_бпсСообщения.Количество(),"ВыборкаРС_бпсСообщения.Количество()").Равно(1);	
		
		ВыборкаРС_бпсСообщения.Следующий();

		Ожидаем.Что(ВыборкаРС_бпсСообщения.Кому,"ВыборкаРС_бпсСообщения.Кому").Заполнено().Равно(ЗаписьбпсСообщения.Кому);
		Ожидаем.Что(ВыборкаРС_бпсСообщения.Тема,"ВыборкаРС_бпсСообщения.Тема").Заполнено().Равно(ЗаписьбпсСообщения.Тема);
		Ожидаем.Что(ВыборкаРС_бпсСообщения.Тело,"ВыборкаРС_бпсСообщения.Тело").Заполнено().Равно(ЗаписьбпсСообщения.Тело);
		//Если НомерЗаписи = 0 Тогда
		//	Ожидаем.Что(ВыборкаРС_бпсСообщения.ИнформацияООшибке,"ВыборкаРС_бпсСообщения.ИнформацияООшибке").Заполнено();
		//	Ожидаем.Что(ВыборкаРС_бпсСообщения.ДатаОтправки,"ВыборкаРС_бпсСообщения.ДатаОтправки").Не_().Заполнено();
		//	Ожидаем.Что(ВыборкаРС_бпсСообщения.КоличествоПопыток,"ВыборкаРС_бпсСообщения.КоличествоПопыток").Равно(1);	
		//Иначе
			Ожидаем.Что(ВыборкаРС_бпсСообщения.ИнформацияООшибке,"ВыборкаРС_бпсСообщения.ИнформацияООшибке").Не_().Заполнено();
			Ожидаем.Что(ВыборкаРС_бпсСообщения.ДатаСоздания,"ВыборкаРС_бпсСообщения.ДатаСоздания").Заполнено();
			Ожидаем.Что(ВыборкаРС_бпсСообщения.ДатаОтправки,"ВыборкаРС_бпсСообщения.ДатаОтправки").Заполнено();
			Ожидаем.Что(ВыборкаРС_бпсСообщения.КоличествоПопыток,"ВыборкаРС_бпсСообщения.КоличествоПопыток").Равно(0);			
		//Конецесли;
		НомерЗаписи = НомерЗаписи + 1;
	Конеццикла;	
	
КонецПроцедуры //ТестДолжен_ОтправитьСообщенияРегламентнымЗаданием()
Функция Загрузить_РС_бпсСообщения()
	Макет = ПолучитьМакет("РегистрСведений_бпсСообщения"); //использую макет из этой же внешней обработки
	ТестовыеДанные = ГенераторТестовыхДанных.СоздатьДанныеПоТабличномуДокументу(Макет);	
	
	Возврат ТестовыеДанные;
КонецФункции
Процедура Проверить_РС_бпсСообщения(ТестовыеДанные) Экспорт
	Ожидаем.Что(ТестовыеДанные, "ЭтоСтруктура").ИмеетТип("Структура");
	Ожидаем.Что(ТестовыеДанные.Количество(),"ТестовыеДанные.Количество()").Равно(3);
	Ожидаем.Что(ТестовыеДанные.Свойство("бпсСообщения_0"),"Ожидали, что есть переменная 'бпсСообщения_0'").ЭтоИстина();
	НаборЗаписей0 = ТестовыеДанные.бпсСообщения_0;
	Ожидаем.Что(НаборЗаписей0,"НаборЗаписей0").ИмеетТип(Тип("РегистрСведенийНаборЗаписей.бпсСообщения"));
	
	бпсСообщения0 = НаборЗаписей0[0];
	Ожидаем.Что(бпсСообщения0.ИдентификаторСообщения,"бпсСообщения0.ИдентификаторСообщения").Заполнено().Равно("123213123");
	Ожидаем.Что(бпсСообщения0.Кому,"бпсСообщения0.Кому").Заполнено().Равно("BPS_1c23124332432@bk123.ru");
	Ожидаем.Что(бпсСообщения0.Тема,"бпсСообщения0.Тема").Заполнено().Равно("Тест регл задания2");
	Ожидаем.Что(бпсСообщения0.Тело,"бпсСообщения0.Тело").Заполнено().Равно("Тест регл задания2");
	Ожидаем.Что(бпсСообщения0.ДатаСоздания,"бпсСообщения0.ДатаСоздания").Заполнено();
	
КонецПроцедуры //Проверить_бпсПредметыСогласований(ТестовыеДанные)



Процедура ТестДолжен_ОтправитьСообщениеИзРССообщения() Экспорт
	ЗаполнитьСистемнуюУчетнаяЗаписьЭлектроннойПочты();
	СистемнаяУчетнаяЗаписьЭлектроннойПочты = Справочники.бпсУчетныеЗаписиЭлектроннойПочты.СистемнаяУчетнаяЗаписьЭлектроннойПочты;
	
	ПараметрыПисьма = Новый Структура;
	ПараметрыПисьма.Вставить("АдресЭлектроннойПочтыКому", "BPS_1c@bk.ru");
	ПараметрыПисьма.Вставить("Тело", "Тестовое письмо");
	ПараметрыПисьма.Вставить("Тема", "Тестовое письмо");
	
	ИдентификаторСообщения = РегистрыСведений.бпсСообщения.ДобавитьСообщение(ПараметрыПисьма);
	
	ПодвалДляПисьма = РегистрыСведений.бпсСообщения.ПолучитьПодвалДляПисьма();
	
	ТекстУведомления = ПараметрыПисьма.Тело;
	ТекстУведомления = ТекстУведомления + ПодвалДляПисьма;
	ПараметрыПисьма.Вставить("Тело", ТекстУведомления);
	
	РезультатЗапроса_бпсСообщения = ПолучитьРезультатЗапроса_РССообщения(ИдентификаторСообщения);
	
	Ожидаем.Что(РезультатЗапроса_бпсСообщения.Пустой(),"РезультатЗапроса_бпсСообщения").ЭтоЛожь();
	ВыборкаРС_бпсСообщения = РезультатЗапроса_бпсСообщения.Выбрать();
	Ожидаем.Что(ВыборкаРС_бпсСообщения.Количество(),"ВыборкаРС_бпсСообщения.Количество()").Равно(1);	
	
	ВыборкаРС_бпсСообщения.Следующий();

	Ожидаем.Что(ВыборкаРС_бпсСообщения.Кому,"ВыборкаРС_бпсСообщения.Кому").Заполнено().Равно(ПараметрыПисьма.АдресЭлектроннойПочтыКому);
	Ожидаем.Что(ВыборкаРС_бпсСообщения.Тема,"ВыборкаРС_бпсСообщения.Тема").Заполнено().Равно(ПараметрыПисьма.Тема);
	Ожидаем.Что(ВыборкаРС_бпсСообщения.Тело,"ВыборкаРС_бпсСообщения.Тело").Заполнено().Равно(ПараметрыПисьма.Тело);
	Ожидаем.Что(ВыборкаРС_бпсСообщения.ИнформацияООшибке,"ВыборкаРС_бпсСообщения.ИнформацияООшибке").Не_().Заполнено();
	Ожидаем.Что(ВыборкаРС_бпсСообщения.ДатаСоздания,"ВыборкаРС_бпсСообщения.ДатаСоздания").Заполнено();
	Ожидаем.Что(ВыборкаРС_бпсСообщения.КоличествоПопыток,"ВыборкаРС_бпсСообщения.КоличествоПопыток").Равно(0);
	
	РегистрыСведений.бпсСообщения.ОтправитьСообщения();
	
	ПолучитьРезультатЗапроса_РССообщения(ИдентификаторСообщения);
	
	РезультатЗапроса_бпсСообщения = ПолучитьРезультатЗапроса_РССообщения(ИдентификаторСообщения);
	
	Ожидаем.Что(РезультатЗапроса_бпсСообщения.Пустой(),"РезультатЗапроса_бпсСообщения").ЭтоЛожь();
	ВыборкаРС_бпсСообщения = РезультатЗапроса_бпсСообщения.Выбрать();
	Ожидаем.Что(ВыборкаРС_бпсСообщения.Количество(),"ВыборкаРС_бпсСообщения.Количество()").Равно(1);	
	
	ВыборкаРС_бпсСообщения.Следующий();

	Ожидаем.Что(ВыборкаРС_бпсСообщения.Кому,"ВыборкаРС_бпсСообщения.Кому").Заполнено().Равно(ПараметрыПисьма.АдресЭлектроннойПочтыКому);
	Ожидаем.Что(ВыборкаРС_бпсСообщения.Тема,"ВыборкаРС_бпсСообщения.Тема").Заполнено().Равно(ПараметрыПисьма.Тема);
	Ожидаем.Что(ВыборкаРС_бпсСообщения.Тело,"ВыборкаРС_бпсСообщения.Тело").Заполнено().Равно(ПараметрыПисьма.Тело);
	Ожидаем.Что(ВыборкаРС_бпсСообщения.ИнформацияООшибке,"ВыборкаРС_бпсСообщения.ИнформацияООшибке").Не_().Заполнено();
	Ожидаем.Что(ВыборкаРС_бпсСообщения.ДатаСоздания,"ВыборкаРС_бпсСообщения.ДатаСоздания").Заполнено();
	Ожидаем.Что(ВыборкаРС_бпсСообщения.ДатаОтправки,"ВыборкаРС_бпсСообщения.ДатаОтправки").Заполнено();
	Ожидаем.Что(ВыборкаРС_бпсСообщения.КоличествоПопыток,"ВыборкаРС_бпсСообщения.КоличествоПопыток").Равно(0);
	
	
КонецПроцедуры //ТестДолжен_ОтправитьСообщениеИзРССообщения

Функция ПолучитьРезультатЗапроса_РССообщения(ИдентификаторСообщения) Экспорт 
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	бпсСообщения.ИдентификаторСообщения,
	|	бпсСообщения.Кому,
	|	бпсСообщения.Тема,
	|	бпсСообщения.Тело,
	|	бпсСообщения.ДатаСоздания,
	|	бпсСообщения.ДатаОтправки,
	|	бпсСообщения.ИнформацияООшибке,
	|	бпсСообщения.КоличествоПопыток
	|ИЗ
	|	РегистрСведений.бпсСообщения КАК бпсСообщения
	|ГДЕ
	|	бпсСообщения.ИдентификаторСообщения = &ИдентификаторСообщения";
	
	Запрос.УстановитьПараметр("ИдентификаторСообщения", ИдентификаторСообщения);
	
	РезультатЗапроса_бпсСообщения = Запрос.Выполнить();
	Возврат РезультатЗапроса_бпсСообщения;	
КонецФункции //ПолучитьРезультатЗапроса_РССообщения(ИдентификаторСообщения)

Процедура УдалитьТестДолжен_СоздатьСправочник_бпсМаршрутыСогласований() Экспорт
	//ТестовыеДанныебпсТипыОбъектовБД = Загрузить_бпсТипыОбъектовБД();
	//ТестовыеДанныебпсУсловия = Создать_бпсУсловия();	
	//ТестовыеДанныеПодразделенияАдресации = Загрузить_бпсПодразделенияАдресации();	
	//ТестовыеДанныеРолиАдресации = Загрузить_бпсРолиАдресации();	
	//ТестовыеДанныебпсПредметыСогласований = Загрузить_бпсПредметыСогласований();
	//
	////ТестовыеДанные = Загрузить_бпсМаршрутыСогласований();
	//Проверить_бпсМаршрутыСогласований(ТестовыеДанные);
КонецПроцедуры //ТестДолжен_СоздатьСправочник_бпсМаршрутыСогласований()

Функция УдалитьЗагрузить_бпсМаршрутыСогласований()
	Макет = ПолучитьМакет("Справочник_бпсМаршрутыСогласований"); //использую макет из этой же внешней обработки
	ТестовыеДанные = ГенераторТестовыхДанных.СоздатьДанныеПоТабличномуДокументу(Макет);	
	
	Возврат ТестовыеДанные;
КонецФункции

Процедура Проверить_бпсМаршрутыСогласований(ТестовыеДанные) Экспорт
	Ожидаем.Что(ТестовыеДанные, "ЭтоСтруктура").ИмеетТип("Структура");
	Ожидаем.Что(ТестовыеДанные.Количество(),"ТестовыеДанные.Количество()").Равно(1);
	Ожидаем.Что(ТестовыеДанные.Свойство("МаршрутСогласования_Договора"),"Ожидали, что есть переменная 'МаршрутСогласования_Договора'").ЭтоИстина();
	МаршрутСогласования_Договора = ТестовыеДанные.МаршрутСогласования_Договора;
	Ожидаем.Что(МаршрутСогласования_Договора,"СправочникСсылка.бпсМаршрутыСогласований").ИмеетТип(Тип("СправочникСсылка.бпсМаршрутыСогласований"));
	Ожидаем.Что(МаршрутСогласования_Договора.Наименование,"МаршрутСогласования_Договора.Наименование = Маршрут согласования договоров").Равно("Маршрут согласования договоров");
КонецПроцедуры //Проверить_бпсПредметыСогласований(ТестовыеДанные)


Процедура ТестДолжен_СоздатьСправочник__ДоговорыКонтрагентов() Экспорт
	ТестовыеДанные = Загрузить__ДоговорыКонтрагентов();
	Проверить__ДоговорыКонтрагентов(ТестовыеДанные);	
КонецПроцедуры //ТестДолжен_СоздатьСправочник__ДоговорыКонтрагентов

Функция Загрузить__ДоговорыКонтрагентов()
	Макет = ПолучитьМакет("Справочник__ДоговорыКонтрагентов"); //использую макет из этой же внешней обработки
	ТестовыеДанные = ГенераторТестовыхДанных.СоздатьДанныеПоТабличномуДокументу(Макет);	
	
	Возврат ТестовыеДанные;
КонецФункции

Процедура Проверить__ДоговорыКонтрагентов(ТестовыеДанные) Экспорт
	Ожидаем.Что(ТестовыеДанные, "ЭтоСтруктура").ИмеетТип("Структура");
	Ожидаем.Что(ТестовыеДанные.Количество(),"ТестовыеДанные.Количество()").Равно(1);
	Ожидаем.Что(ТестовыеДанные.Свойство("Договор_Основной"),"Ожидали, что есть переменная 'Договор_Основной'").ЭтоИстина();
	Договор_Основной = ТестовыеДанные.Договор_Основной;
	Ожидаем.Что(Договор_Основной,"СправочникСсылка._ДоговорыКонтрагентов").ИмеетТип(Тип("СправочникСсылка._ДоговорыКонтрагентов"));
	Ожидаем.Что(Договор_Основной.Наименование,"Договор_Основной.Наименование = Договор основной").Равно("Договор основной");
КонецПроцедуры //Проверить_бпсПредметыСогласований(ТестовыеДанные)

Процедура ТестДолжен_ЗаполнитьРегистрСведений_бпсРегистрАдресации() Экспорт
	ТестовыеДанныебпсТипыОбъектовБД = Загрузить_бпсТипыОбъектовБД();
	ТестовыеДанныебпсУсловия = Создать_бпсУсловия(ТестовыеДанныебпсТипыОбъектовБД);	
	ТестовыеДанныеРолиАдресации = Загрузить_бпсРолиАдресации();
	ТестовыеДанныеПодразделенияАдресации = Загрузить_бпсПодразделенияАдресации();	
	ТестовыеДанныебпсПредметыСогласований = Загрузить_бпсПредметыСогласований();
	
	ТестовыеДанныебпсРегистрАдресации = Загрузить_бпсРегистрАдресации();
	Проверить_бпсРегистрАдресации(ТестовыеДанныебпсРегистрАдресации);
КонецПроцедуры //ТестДолжен_ЗаполнитьРегистрСведений_бпсРегистрАдресации

Функция Загрузить_бпсРегистрАдресации()
	Макет = ПолучитьМакет("РегистрСведений_бпсРегистрАдресации"); //использую макет из этой же внешней обработки
	ТестовыеДанные = ГенераторТестовыхДанных.СоздатьДанныеПоТабличномуДокументу(Макет);	
	
	Возврат ТестовыеДанные;
КонецФункции

Процедура Проверить_бпсРегистрАдресации(ТестовыеДанные) Экспорт
	Ожидаем.Что(ТестовыеДанные, "ЭтоСтруктура").ИмеетТип("Структура");
	Ожидаем.Что(ТестовыеДанные.Количество(),"ТестовыеДанные.Количество()").Равно(3);
	Ожидаем.Что(ТестовыеДанные.Свойство("ЗаписьРегистра1"),"Ожидали, что есть переменная 'ЗаписьРегистра1'").ЭтоИстина();
	ЗаписьРегистра1 = ТестовыеДанные.ЗаписьРегистра1;
	Ожидаем.Что(ЗаписьРегистра1.Пользователь,"СправочникСсылка.Пользователи").ИмеетТип(Тип("СправочникСсылка.Пользователи"));
	Ожидаем.Что(ЗаписьРегистра1.Пользователь,"Пользователь ЗначениеЗаполнено").Заполнено();
	Ожидаем.Что(ЗаписьРегистра1.РольАдресации,"РольАдресации ЗначениеЗаполнено").Заполнено();
	Ожидаем.Что(ЗаписьРегистра1.ПодразделениеАдресации,"ПодразделениеАдресации ЗначениеЗаполнено").Заполнено();
	
КонецПроцедуры //Проверить_бпсПредметыСогласований(ТестовыеДанные)


Процедура ТестДолжен_ЗаполнитьРегистрСведений_бпсНастройкиПользователей() Экспорт
	ТестовыеДанныебпсНастройкиПользователей = Загрузить_бпсНастройкиПользователей();
	Проверить_бпсНастройкиПользователей(ТестовыеДанныебпсНастройкиПользователей);
КонецПроцедуры //ТестДолжен_ЗаполнитьРегистрСведений_бпсНастройкиПользователей()

Функция Загрузить_бпсНастройкиПользователей()
	Макет = ПолучитьМакет("РегистрСведений_бпсНастройкиПользователей"); //использую макет из этой же внешней обработки
	ТестовыеДанные = ГенераторТестовыхДанных.СоздатьДанныеПоТабличномуДокументу(Макет);	
	
	Возврат ТестовыеДанные;
КонецФункции

Процедура Проверить_бпсНастройкиПользователей(ТестовыеДанные) Экспорт
	Ожидаем.Что(ТестовыеДанные, "ЭтоСтруктура").ИмеетТип("Структура");
	Ожидаем.Что(ТестовыеДанные.Количество(),"ТестовыеДанные.Количество()").Равно(1);
	Ожидаем.Что(ТестовыеДанные.Свойство("ЗаписьРегистра1"),"Ожидали, что есть переменная 'ЗаписьРегистра1'").ЭтоИстина();
	ЗаписьРегистра1 = ТестовыеДанные.ЗаписьРегистра1;
	Ожидаем.Что(ЗаписьРегистра1.Пользователь,"СправочникСсылка.Пользователи").ИмеетТип(Тип("СправочникСсылка.Пользователи"));
	Ожидаем.Что(ЗаписьРегистра1.Пользователь,"Пользователь ЗначениеЗаполнено").Заполнено();
	Ожидаем.Что(ЗаписьРегистра1.НеУведомлятьОЗадачахПочтой,"НеУведомлятьОЗадачахПочтой").ЭтоЛожь();
	Ожидаем.Что(ЗаписьРегистра1.АдресЭлектроннойПочты,"АдресЭлектроннойПочты ЗначениеЗаполнено").Заполнено();
	
КонецПроцедуры //Проверить_бпсПредметыСогласований(ТестовыеДанные)



Процедура ТестДолжен_СоздатьПодразделение_Заблокировать_ПроверитьМожноЛиПрограммноЕгоИзменить() Экспорт
	Отказ = Ложь;
	
	СпрОбъект = Справочники.бпсПодразделенияАдресации.СоздатьЭлемент();	
	СпрОбъект.Наименование = "Подразделение №1";
	СпрОбъект.Записать();
	
	ТекстТеста = "";
	Ожидаем.Что(СпрОбъект,ТекстТеста).Существует();
	
	пОбъектБД = СпрОбъект.Ссылка; 
	
	//НаборЗаписей=РегистрыСведений.бпсЗаблокированныеОбъекты.СоздатьНаборЗаписей();
	//НаборЗаписей.Отбор.пОбъектБД.Установить(пОбъектБД);
	//Запись=НаборЗаписей.Добавить();
	//Запись.пОбъектБД = пОбъектБД;
	//НаборЗаписей.Записать();
	
	ДопПараметры = Новый Структура();
	ДопПараметры.Вставить("ОбъектБД",пОбъектБД);
	РегистрыСведений.бпсЗаблокированныеОбъекты.ДобавитьЗапись(ДопПараметры,Отказ);
	Ожидаем.Что(Отказ,"Отказ").ЭтоЛожь();
	
	РезультатЗапросаРС_бпсЗаблокированныеОбъекты = ПолучитьРезультатЗапросаРС_бпсЗаблокированныеОбъекты(ДопПараметры);
	
	Ожидаем.Что(РезультатЗапросаРС_бпсЗаблокированныеОбъекты.Пустой(), "РезультатЗапросаРС_бпсЗаблокированныеОбъекты").ЭтоЛожь();
	ВыборкаРС_бпсЗаблокированныеОбъекты = РезультатЗапросаРС_бпсЗаблокированныеОбъекты.Выбрать();
	Ожидаем.Что(ВыборкаРС_бпсЗаблокированныеОбъекты.Количество(),"ВыборкаРС_бпсЗаблокированныеОбъекты.Количество()").Равно(1);	
	
	ВыборкаРС_бпсЗаблокированныеОбъекты.Следующий();

	Ожидаем.Что(ВыборкаРС_бпсЗаблокированныеОбъекты.ОбъектБД,"ВыборкаРС_бпсЗаблокированныеОбъекты.ОбъектБД").Равно(пОбъектБД);

	
	СпрОбъект.Наименование = "Подразделение №1 - Изменено";
	СпрОбъект.ДополнительныеСвойства.Вставить("НеВыдаватьСообщения",Истина);
	УдалосьОтредактироватьОбъект = Ложь;
	Попытка
		СпрОбъект.Записать();
		УдалосьОтредактироватьОбъект = Истина;
	Исключение
	КонецПопытки;
	Если УдалосьОтредактироватьОбъект Тогда
		ВызватьИсключение "Ошибка! удалось отредактировать объект";
	Конецесли;
КонецПроцедуры //ТестДолжен_ЗаблокироватьОбъектИПроверитьМожноЛиПрограммноЕгоИзменить

Процедура ТестДолжен_СоздатьЗаписьВРегистрАдресации() Экспорт
	РолиАдресации_ОсновнаяРоль = Справочники.бпсРолиАдресации.ОсновнаяРоль;
	ПодразделенияАдресации_ВсяФирма = Справочники.бпсПодразделенияАдресации.ВсяФирма;
	
	
	НаборЗаписей=РегистрыСведений.бпсРегистрАдресации.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Пользователь.Установить(ПараметрыСеанса.ТекущийПользователь);
	НаборЗаписей.Отбор.РольАдресации.Установить(РолиАдресации_ОсновнаяРоль);
	НаборЗаписей.Отбор.ПодразделениеАдресации.Установить(ПодразделенияАдресации_ВсяФирма);
	Запись=НаборЗаписей.Добавить();
	Запись.Пользователь=ПараметрыСеанса.ТекущийПользователь;
	Запись.РольАдресации=РолиАдресации_ОсновнаяРоль;
	Запись.ПодразделениеАдресации=ПодразделенияАдресации_ВсяФирма;
	НаборЗаписей.Записать();

	НаборЗаписей.Прочитать();
	ТекстТеста = "";
	Ожидаем.Что(НаборЗаписей.Количество(),ТекстТеста).Равно(1);
КонецПроцедуры

Процедура ТестДолжен_СоздатьЗадачу() Экспорт
	РолиАдресации_ОсновнаяРоль = Справочники.бпсРолиАдресации.ОсновнаяРоль;
	ПодразделенияАдресации_ВсяФирма = Справочники.бпсПодразделенияАдресации.ВсяФирма;
	
	ЗадачаОбъект = Задачи.бпсЗадача.СоздатьЗадачу();
	ЗадачаОбъект.Дата = ТекущаяДата();
	ЗадачаОбъект.РольАдресации = РолиАдресации_ОсновнаяРоль;
	ЗадачаОбъект.ПодразделениеАдресации = ПодразделенияАдресации_ВсяФирма;
	ЗадачаОбъект.Наименование = "Тест задачи";
	ЗадачаОбъект.Записать();
	
	НаборЗаписей=РегистрыСведений.бпсРегистрАдресации.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Пользователь.Установить(ПараметрыСеанса.ТекущийПользователь);
	НаборЗаписей.Отбор.РольАдресации.Установить(РолиАдресации_ОсновнаяРоль);
	НаборЗаписей.Отбор.ПодразделениеАдресации.Установить(ПодразделенияАдресации_ВсяФирма);
	Запись=НаборЗаписей.Добавить();
	Запись.Пользователь=ПараметрыСеанса.ТекущийПользователь;
	Запись.РольАдресации=РолиАдресации_ОсновнаяРоль;
	Запись.ПодразделениеАдресации=ПодразделенияАдресации_ВсяФирма;
	НаборЗаписей.Записать();

	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	бпсЗадачаЗадачиПоИсполнителю.Ссылка
	|ИЗ
	|	Задача.бпсЗадача.ЗадачиПоИсполнителю(&ТекущийПользователь, ) КАК бпсЗадачаЗадачиПоИсполнителю
	|ГДЕ
	|	бпсЗадачаЗадачиПоИсполнителю.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("ТекущийПользователь", ПараметрыСеанса.ТекущийПользователь);
	Запрос.УстановитьПараметр("Ссылка", ЗадачаОбъект.Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	//Утверждения.ПроверитьРавенство(2 + 2, 4, "2 + 2, 4");
	Ожидаем.Что(РезультатЗапроса.Пустой(), "Есть задача для пользователя").Не_().ЭтоИстина();
КонецПроцедуры

Процедура ТестДолжен_СоздатьИЗаполнитьПредметСогласования() Экспорт
	//пОбъектБД = Справочники.бпсПодразделенияАдресации.ВсяФирма;
	//
	//ПредметСогласованияОбъект = Справочники.бпсПредметыСогласований.СоздатьЭлемент();
	//ПредметСогласованияОбъект.Наименование = "Согласуем подразделение";
	//ПредметСогласованияОбъект.Записать();
	//пПредметСогласования = ПредметСогласованияОбъект.Ссылка;
	//
	//ТекстТеста = "Создали предмет согласования [Согласуем подразделение]";
	//Ожидаем.Что(пПредметСогласования,ТекстТеста).Существует();
	СоздатьПредметСогласования_Подразделение();
	
КонецПроцедуры

Процедура ТестДолжен_ПровестиРегистрациюСтатусаОбъекта() Экспорт
	пОбъектБД = Справочники.бпсПодразделенияАдресации.ВсяФирма;
	Статус_ВозвращеноНаДоработку = Справочники.бпсСтатусыОбъектов.Согласование_ВозвращеноНаДоработку;
	
	ПредметСогласованияОбъект = Справочники.бпсПредметыСогласований.СоздатьЭлемент();
	ПредметСогласованияОбъект.Наименование = "Согласуем подразделение";
	ПредметСогласованияОбъект.Записать();
	пПредметСогласования = ПредметСогласованияОбъект.Ссылка;
		
	ДокОбъект = Документы.бпсРегистрацияСтатусаОбъекта.СоздатьДокумент();
	ДокОбъект.Дата = ТекущаяДата();
	ДокОбъект.ОбъектБД = пОбъектБД;
	ДокОбъект.ПредметСогласования = пПредметСогласования;
	ДокОбъект.Статус = Статус_ВозвращеноНаДоработку;
	ДокОбъект.Записать(РежимЗаписиДокумента.Проведение);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	бпсСтатусыСогласованийСрезПоследних.ОбъектБД,
		|	бпсСтатусыСогласованийСрезПоследних.Статус
		|ИЗ
		|	РегистрСведений.бпсСтатусыОбъектов.СрезПоследних(
		|			&МоментВремени,
		|			ОбъектБД = &ОбъектБД
		|				И ПредметСогласования = &ПредметСогласования) КАК бпсСтатусыСогласованийСрезПоследних
		|ГДЕ
		|	бпсСтатусыСогласованийСрезПоследних.Статус = &Статус";
	
	Запрос.УстановитьПараметр("МоментВремени", ДокОбъект.МоментВремени());
	Запрос.УстановитьПараметр("ОбъектБД", пОбъектБД);
	Запрос.УстановитьПараметр("ПредметСогласования", пПредметСогласования);
	Запрос.УстановитьПараметр("Статус", Статус_ВозвращеноНаДоработку);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ТекстТеста = "Статус для документа установлен Статус = ["+Статус_ВозвращеноНаДоработку+"]";
	Ожидаем.Что(РезультатЗапроса.Пустой(),ТекстТеста).Не_().ЭтоИстина();
КонецПроцедуры //ТестДолжен_ПровестиРегистрациюСтатусаОбъекта

Процедура ТестДолжен_ПроверитьПолныйЦикл_бпсСогласование() Экспорт
	Отказ = Ложь;
	
	ТестовыеДанныебпсТипыОбъектовБД = Загрузить_бпсТипыОбъектовБД();
	ТестовыеДанныебпсУсловия = Создать_бпсУсловия(ТестовыеДанныебпсТипыОбъектовБД);	
	ТестовыеДанныеРолиАдресации = Загрузить_бпсРолиАдресации();
	ТестовыеДанныеПодразделенияАдресации = Загрузить_бпсПодразделенияАдресации();	
	ТестовыеДанныебпсПредметыСогласований = Загрузить_бпсПредметыСогласований();
	//ТестовыеДанныебпсМаршрутыСогласований = Загрузить_бпсМаршрутыСогласований();
	ТестовыеДанныебпсРегистрАдресации = Загрузить_бпсРегистрАдресации();
	ТестовыеДанныебпсНастройкиПользователей = Загрузить_бпсНастройкиПользователей();
	ТестовыеДанныеДоговорыКонтрагентов = Загрузить__ДоговорыКонтрагентов();
	
	ЗаполнитьСистемнуюУчетнаяЗаписьЭлектроннойПочты();
	
	ПредметСогласования = ТестовыеДанныебпсПредметыСогласований.ПредметСогласования_Договор;
	СтрокаОпределениеЛистаСогласования0 = ПредметСогласования.ОпределениеЛистаСогласования[0];
	
	Ожидаем.Что(СтрокаОпределениеЛистаСогласования0.ПодразделениеАдресации,"СтрокаОпределениеЛистаСогласования0.ПодразделениеАдресации").Равно(ТестовыеДанныеПодразделенияАдресации.Подразделение_Хабаровск);	
	Ожидаем.Что(СтрокаОпределениеЛистаСогласования0.РольАдресации.Код,"СтрокаОпределениеЛистаСогласования0.РольАдресации.Код").Равно(ТестовыеДанныеРолиАдресации.Роль_Юрист.Код);
	Ожидаем.Что(СтрокаОпределениеЛистаСогласования0.РольАдресации,"СтрокаОпределениеЛистаСогласования0.РольАдресации").Равно(ТестовыеДанныеРолиАдресации.Роль_Юрист);
	
	
	пОбъектБД = ТестовыеДанныеДоговорыКонтрагентов.Договор_Основной;
	//МаршрутСогласования = ТестовыеДанныебпсМаршрутыСогласований.МаршрутСогласования_Договора;
	
	
	БизнесПроцессОбъект = БизнесПроцессы.бпсСогласование.СоздатьБизнесПроцесс();
	БизнесПроцессОбъект.Дата = ТекущаяДата();
	БизнесПроцессОбъект.ОбъектБД = пОбъектБД;	
	БизнесПроцессОбъект.ПредметСогласования = ПредметСогласования;
	БизнесПроцессОбъект.Инициатор = ПараметрыСеанса.ТекущийПользователь;
	
	ДанныеЗаполнения = Новый Структура();
	ДанныеЗаполнения.Вставить("ОбъектБД",пОбъектБД);
	ДанныеЗаполнения.Вставить("ПредметСогласования",ПредметСогласования);
	//ДанныеЗаполнения.Вставить("МаршрутСогласования",МаршрутСогласования);
	
	БизнесПроцессОбъект.Заполнить(ДанныеЗаполнения);
	
	
	БизнесПроцессОбъект.Записать();
	//БизнесПроцессОбъект.ЗаполнитьАвто(Отказ); //Временно, что отработать условия, потом заменить на Старт
	БизнесПроцессОбъект.Старт();
	
	ЗапросЗадачаУведомления = Новый Запрос();
	ЗапросЗадачаУведомления.Текст = "
	|ВЫБРАТЬ
	|	бпсЗадача.Ссылка,
	|	бпсЗадача.Пользователь,
	|	бпсЗадача.РольАдресации,
	|	бпсЗадача.ПодразделениеАдресации
	|ИЗ
	|	Задача.бпсЗадача КАК бпсЗадача
	|ГДЕ
	|	бпсЗадача.Пользователь = &Пользователь
	|	И НЕ бпсЗадача.Выполнена
	|	И бпсЗадача.БизнесПроцесс = ЗНАЧЕНИЕ(БизнесПроцесс.бпсСогласование.ПустаяСсылка)";
	ЗапросЗадачаУведомления.УстановитьПараметр("Пользователь",ПараметрыСеанса.ТекущийПользователь);	
	РезультатЗапроса_Уведомления = ЗапросЗадачаУведомления.Выполнить();
	Ожидаем.Что(РезультатЗапроса_Уведомления.Пустой(),"РезультатЗапроса_Уведомления.Пустой()").ЭтоЛожь();
	ВыборкаЗапроса_Уведомления = РезультатЗапроса_Уведомления.Выбрать();
	Ожидаем.Что(ВыборкаЗапроса_Уведомления.Количество(),"ВыборкаЗапроса_Уведомления.Количество()").Равно(1);	
	
	//ДопПараметры = Новый Структура();
	//ДопПараметры.Вставить("ОбъектБД",пОбъектБД);
	//РегистрыСведений.бпсЗаблокированныеОбъекты.ДобавитьЗапись(ДопПараметры,Отказ);
	//Ожидаем.Что(Отказ,"Отказ").ЭтоЛожь();
	
	ДопПараметрыЗаблокированныеОбъекты = Новый Структура();
	ДопПараметрыЗаблокированныеОбъекты.Вставить("ОбъектБД",пОбъектБД);
	РезультатЗапросаРС_бпсЗаблокированныеОбъекты = ПолучитьРезультатЗапросаРС_бпсЗаблокированныеОбъекты(ДопПараметрыЗаблокированныеОбъекты);
	
	Ожидаем.Что(РезультатЗапросаРС_бпсЗаблокированныеОбъекты.Пустой(),"РезультатЗапросаРС_бпсЗаблокированныеОбъекты").ЭтоЛожь();
	ВыборкаРС_бпсЗаблокированныеОбъекты = РезультатЗапросаРС_бпсЗаблокированныеОбъекты.Выбрать();
	Ожидаем.Что(ВыборкаРС_бпсЗаблокированныеОбъекты.Количество(),"ВыборкаРС_бпсЗаблокированныеОбъекты.Количество()").Равно(1);	
	
	ВыборкаРС_бпсЗаблокированныеОбъекты.Следующий();

	Ожидаем.Что(ВыборкаРС_бпсЗаблокированныеОбъекты.ОбъектБД,"ВыборкаРС_бпсЗаблокированныеОбъекты.ОбъектБД").Равно(пОбъектБД);
	
	//БизнесПроцессОбъект.Записать();
	
	БизнесПроцессСсылка = БизнесПроцессОбъект.Ссылка;
	
	Ожидаем.Что(Отказ,"Отказ = Ложь").Не_().ЭтоИстина();
	Ожидаем.Что(БизнесПроцессСсылка,"БП существует").Существует();
	Ожидаем.Что(БизнесПроцессСсылка.ЛистСогласования.Количество(),"ЛистСогласования.Количество()").Равно(2);
	Ожидаем.Что(БизнесПроцессСсылка.ПользователиДляУведомления.Количество(),"ПользователиДляУведомления.Количество()").Равно(3);
	Ожидаем.Что(БизнесПроцессСсылка.Действия.Количество(),"Действия.Количество()").Равно(2);
	
	Ожидаем.Что(БизнесПроцессСсылка.ТекущийНомерОчереди,"ТекущийНомерОчереди").Равно(1);
	Ожидаем.Что(БизнесПроцессСсылка.ОбъектБД,"ОбъектБД").Заполнено();
	Ожидаем.Что(БизнесПроцессСсылка.ПредметСогласования,"ПредметСогласования").Заполнено();
	Ожидаем.Что(БизнесПроцессСсылка.Инициатор,"Инициатор").Заполнено();	
	//Ожидаем.Что(БизнесПроцессСсылка.МаршрутСогласования,"МаршрутСогласования").Заполнено();
	Ожидаем.Что(БизнесПроцессСсылка.Пояснение,"Пояснение").Заполнено();
	Ожидаем.Что(БизнесПроцессСсылка.ПротоколФормированияЛистаСогласования,"ПротоколФормированияЛистаСогласования").Заполнено();
	Ожидаем.Что(БизнесПроцессСсылка.УпрощеннаяСистемаУведомлений,"УпрощеннаяСистемаУведомлений").ЭтоИстина();
	Ожидаем.Что(БизнесПроцессСсылка.УведомитьИнициатораОЗавершении,"УведомитьИнициатораОЗавершении").ЭтоИстина();
	Ожидаем.Что(БизнесПроцессСсылка.РазрешеноПовторноеСогласование,"РазрешеноПовторноеСогласование").ЭтоИстина();
	
	
		
	//СтрокаЛистСогласования1 = БизнесПроцессСсылка.ЛистСогласования[1];
	//Ожидаем.Что(СтрокаЛистСогласования1.ПодразделениеАдресации,"СтрокаЛистСогласования1.ПодразделениеАдресации").Равно(ТестовыеДанныеПодразделенияАдресации.Подразделение_Москва);	
	//Ожидаем.Что(СтрокаЛистСогласования1.РольАдресации,"СтрокаЛистСогласования1.РольАдресации").Равно(ТестовыеДанныеРолиАдресации.Роль_Бухгалтер);		
	//
	//СтрокаЛистСогласования2 = БизнесПроцессСсылка.ЛистСогласования[2];
	//Ожидаем.Что(СтрокаЛистСогласования2.ПодразделениеАдресации,"СтрокаЛистСогласования2.ПодразделениеАдресации").Равно(ТестовыеДанныеПодразделенияАдресации.Подразделение_Адыгея);	
	//Ожидаем.Что(СтрокаЛистСогласования2.РольАдресации,"СтрокаЛистСогласования2.РольАдресации").Равно(ТестовыеДанныеРолиАдресации.Роль_КоммерческийДиректор);			
	//
	//СтрокаЛистСогласования0 = БизнесПроцессСсылка.ЛистСогласования[0];
	//Ожидаем.Что(СтрокаЛистСогласования0.ПодразделениеАдресации,"СтрокаЛистСогласования0.ПодразделениеАдресации").Равно(ТестовыеДанныеПодразделенияАдресации.Подразделение_Хабаровск);	
	//Ожидаем.Что(СтрокаЛистСогласования0.РольАдресации,"СтрокаЛистСогласования0.РольАдресации").Равно(ТестовыеДанныеРолиАдресации.Роль_Юрист);
	//
	
	ДопПараметрыСтатус = Новый Структура();
	ДопПараметрыСтатус.Вставить("ОбъектБД",пОбъектБД);
	ДопПараметрыСтатус.Вставить("ПредметСогласования",ПредметСогласования);
	ДопПараметрыСтатус.Вставить("ТребуемыйСтатус",Справочники.бпсСтатусыОбъектов.Согласование_ВПроцессеСогласования);
	ДопПараметрыСтатус.Вставить("ТребуемоеОснование",БизнесПроцессСсылка);
	ПроверитьСтатусОбъектаСогласования(ДопПараметрыСтатус);
	
	ДопПараметрыСтатус = Новый Структура();
	ДопПараметрыСтатус.Вставить("ОбъектБД",БизнесПроцессСсылка);
	ДопПараметрыСтатус.Вставить("ПредметСогласования",ПредметСогласования);
	ДопПараметрыСтатус.Вставить("ТребуемыйСтатус",Справочники.бпсСтатусыОбъектов.Согласование_ВПроцессеСогласования);
	ДопПараметрыСтатус.Вставить("ТребуемоеОснование",БизнесПроцессСсылка);
	ПроверитьСтатусОбъектаСогласования(ДопПараметрыСтатус);
	
	
	КомандаСогласования = ПредопределенноеЗначение("Перечисление.бпсКомандыСогласования.Согласовано");
	пРецензия = "";
	Для каждого СтрокаЛистСогласования из БизнесПроцессСсылка.ЛистСогласования цикл
		ДопПараметры = Новый Структура();
		ДопПараметры.Вставить("БизнесПроцесс",БизнесПроцессСсылка);
		ДопПараметры.Вставить("РольАдресации",СтрокаЛистСогласования.РольАдресации);
		ДопПараметры.Вставить("ПодразделениеАдресации",СтрокаЛистСогласования.ПодразделениеАдресации);
		ЗадачаСсылка = ПолучитьЗадачу(ДопПараметры);
		
		
		ДопПараметрыЗаписиРС = Новый Структура();
		ДопПараметрыЗаписиРС.Вставить("ОбъектБД",пОбъектБД);
		ДопПараметрыЗаписиРС.Вставить("ИсходныйБизнесПроцесс",БизнесПроцессСсылка);
		ДопПараметрыЗаписиРС.Вставить("Задача",ЗадачаСсылка);
		РезультатЗапросаРС_бпсЗадачиПоБизнесПроцессам = ПолучитьРезультатЗапросаРС_бпсЗадачиПоБизнесПроцессам(ДопПараметрыЗаписиРС);
		
		Ожидаем.Что(РезультатЗапросаРС_бпсЗадачиПоБизнесПроцессам.Пустой(), "бпсЗадачиПоБизнесПроцессам РезультатЗапроса").ЭтоЛожь();
		ВыборкаРС_бпсЗадачиПоБизнесПроцессам = РезультатЗапросаРС_бпсЗадачиПоБизнесПроцессам.Выбрать();
		Ожидаем.Что(ВыборкаРС_бпсЗадачиПоБизнесПроцессам.Количество(),"бпсЗадачиПоБизнесПроцессам Выборка.Количество()").Равно(1);	
		
		ВыборкаРС_бпсЗадачиПоБизнесПроцессам.Следующий();

		Ожидаем.Что(ВыборкаРС_бпсЗадачиПоБизнесПроцессам.Согласовано,"Выборка.Согласовано").ЭтоЛожь();
		
		пРецензия = ""+СтрокаЛистСогласования.РольАдресации + " - все ок";
		
		БизнесПроцессОбъект = БизнесПроцессСсылка.ПолучитьОбъект(); //Специально еще раз читаю объект
		
		ДопПараметрыЗадачи = Новый Структура();		
		ДопПараметрыЗадачи.Вставить("ЗадачаСсылка",ЗадачаСсылка);
		ДопПараметрыЗадачи.Вставить("КомандаСогласования",КомандаСогласования);
		ДопПараметрыЗадачи.Вставить("Рецензия",пРецензия);
		БизнесПроцессОбъект.ВыполнитьЗадачу(ДопПараметрыЗадачи);
		
		
		
		ДопПараметрыЗаписиРС = Новый Структура();
		ДопПараметрыЗаписиРС.Вставить("ОбъектБД",пОбъектБД);
		ДопПараметрыЗаписиРС.Вставить("ИсходныйБизнесПроцесс",БизнесПроцессСсылка);
		ДопПараметрыЗаписиРС.Вставить("Задача",ЗадачаСсылка);
		РезультатЗапросаРС_бпсЗадачиПоБизнесПроцессам = ПолучитьРезультатЗапросаРС_бпсЗадачиПоБизнесПроцессам(ДопПараметрыЗаписиРС);
		
		Ожидаем.Что(РезультатЗапросаРС_бпсЗадачиПоБизнесПроцессам.Пустой(), "бпсЗадачиПоБизнесПроцессам РезультатЗапроса").ЭтоЛожь();
		ВыборкаРС_бпсЗадачиПоБизнесПроцессам = РезультатЗапросаРС_бпсЗадачиПоБизнесПроцессам.Выбрать();
		Ожидаем.Что(ВыборкаРС_бпсЗадачиПоБизнесПроцессам.Количество(),"бпсЗадачиПоБизнесПроцессам Выборка.Количество()").Равно(1);	
		
		ВыборкаРС_бпсЗадачиПоБизнесПроцессам.Следующий();

		Ожидаем.Что(ВыборкаРС_бпсЗадачиПоБизнесПроцессам.Согласовано,"Выборка.Согласовано").ЭтоИстина();
		Ожидаем.Что(ВыборкаРС_бпсЗадачиПоБизнесПроцессам.Рецензия,"Выборка.Рецензия").Заполнено().Равно(пРецензия);
		Ожидаем.Что(ЗадачаСсылка.ФактическийИсполнитель,"ЗадачаСсылка.ФактическийИсполнитель").Заполнено();
		Ожидаем.Что(ЗадачаСсылка.ФактическаяДатаВыполнения,"ЗадачаСсылка.ФактическаяДатаВыполнения").Заполнено();
		
	Конеццикла;
	
	ДопПараметрыЗаблокированныеОбъекты = Новый Структура();
	ДопПараметрыЗаблокированныеОбъекты.Вставить("ОбъектБД",пОбъектБД);
	РезультатЗапросаРС_бпсЗаблокированныеОбъекты = ПолучитьРезультатЗапросаРС_бпсЗаблокированныеОбъекты(ДопПараметрыЗаблокированныеОбъекты);
	
	Ожидаем.Что(РезультатЗапросаРС_бпсЗаблокированныеОбъекты.Пустой(),"РезультатЗапросаРС_бпсЗаблокированныеОбъекты БП завершен").ЭтоИстина();
	
	ДопПараметрыСтатус = Новый Структура();
	ДопПараметрыСтатус.Вставить("ОбъектБД",пОбъектБД);
	ДопПараметрыСтатус.Вставить("ПредметСогласования",ПредметСогласования);
	ДопПараметрыСтатус.Вставить("ТребуемыйСтатус",Справочники.бпсСтатусыОбъектов.Согласование_Утверждено);
	ДопПараметрыСтатус.Вставить("ТребуемоеОснование",БизнесПроцессСсылка);
	ПроверитьСтатусОбъектаСогласования(ДопПараметрыСтатус);
	
	ДопПараметрыСтатус = Новый Структура();
	ДопПараметрыСтатус.Вставить("ОбъектБД",БизнесПроцессСсылка);
	ДопПараметрыСтатус.Вставить("ПредметСогласования",ПредметСогласования);
	ДопПараметрыСтатус.Вставить("ТребуемыйСтатус",Справочники.бпсСтатусыОбъектов.Согласование_Утверждено);
	ДопПараметрыСтатус.Вставить("ТребуемоеОснование",БизнесПроцессСсылка);
	ПроверитьСтатусОбъектаСогласования(ДопПараметрыСтатус);	
	
	//РегистрыСведений.бпсСообщения.ОтправитьСообщения();
	
	//Что еще надо проверить.
	//Проверить создалась ли задача +
	//Проверить есть ли записи по задаче в регистре сведений Задачи по бизнес процессам +
	//Проверить статус объекта согласования, должен быть "В процессе утверждения" +
	
	//Повтор для всех пользователей
	//	Выполнить задачу (Согласовано)
	//	Проверить отправилось ли уведомление
	//	Проверить получение почты для пользователей рецензентов	
	//Конец повтора для всех пользователей
	
	//Проверить повторное согласование
	
	//При завершении БП проверить изменился статус на Утверждено
	//При завершении БП проверить изменился статус на Не утверждено
	
КонецПроцедуры //ТестДолжен_СоздатьИЗапуститьБПСогласование

Процедура Согласовать(ОбъектБД,ПараметрыРезультатовСогласования) Экспорт
	ВызватьИсключение "Ошибка! Нет алгоритма ";
КонецПроцедуры //

Процедура ЗаполнитьСистемнуюУчетнаяЗаписьЭлектроннойПочты() Экспорт
	СистемнаяУчетнаяЗаписьЭлектроннойПочты = Справочники.бпсУчетныеЗаписиЭлектроннойПочты.СистемнаяУчетнаяЗаписьЭлектроннойПочты;
	Ожидаем.Что(СистемнаяУчетнаяЗаписьЭлектроннойПочты,"СистемнаяУчетнаяЗаписьЭлектроннойПочты").ИмеетТип(Тип("СправочникСсылка.бпсУчетныеЗаписиЭлектроннойПочты"));
	Ожидаем.Что(СистемнаяУчетнаяЗаписьЭлектроннойПочты,"СистемнаяУчетнаяЗаписьЭлектроннойПочты").Существует();
	СпрОбъект = СистемнаяУчетнаяЗаписьЭлектроннойПочты.Ссылка.ПолучитьОбъект();	
	Ожидаем.Что(СпрОбъект,"СпрОбъект").ИмеетТип(Тип("СправочникОбъект.бпсУчетныеЗаписиЭлектроннойПочты"));
	
	СпрОбъект.SMTPАутентификация = Перечисления.бпсВариантыSMTPАутентификации.POP3ПередSMTP;
	СпрОбъект.АдресЭлектроннойПочты = "BPS_1c@bk.ru";
	СпрОбъект.ВремяОжидания = 30;
	СпрОбъект.ИмяПользователя = "BPS_1c";
	СпрОбъект.ИспользоватьБезопасныйВходНаСерверИсходящейПочты = Истина;
	СпрОбъект.ИспользоватьДляОтправки = Истина;
	СпрОбъект.ИспользоватьЗащищенноеСоединениеДляВходящейПочты = Истина;
	СпрОбъект.ИспользоватьЗащищенноеСоединениеДляИсходящейПочты = Истина;
	СпрОбъект.Пользователь = "BPS_1c";
	СпрОбъект.ПользовательSMTP = "BPS_1c";
	СпрОбъект.ПортСервераВходящейПочты = 995;
	СпрОбъект.ПортСервераВходящейПочты = 995;
	СпрОбъект.ПортСервераИсходящейПочты = 465;
	СпрОбъект.ПротоколВходящейПочты = "POP";
	СпрОбъект.СерверВходящейПочты = "pop.bk.ru";
	СпрОбъект.СерверИсходящейПочты = "smtp.bk.ru";
	СпрОбъект.СпособPOP3Аутентификации = Перечисления.бпсСпособыPOP3Аутентификации.Обычная;
	СпрОбъект.СпособSMTPАутентификации = Перечисления.бпсСпособыSMTPАутентификации.ПоУмолчанию;
	СпрОбъект.ТребуетсяВходНаСерверПередОтправкой = Истина;
	СпрОбъект.Пароль = "56N352lQjsmX";
	СпрОбъект.ПарольSMTP = "56N352lQjsmX";
	СпрОбъект.Записать();
	
	//SMTPАутентификация	POP3ПередSMTP
	//АдресЭлектроннойПочты	BPS_1c@bk.ru
	//ВремяОжидания	30
	//ИмяПользователя	BPS_1c
	//ИспользоватьБезопасныйВходНаСерверИсходящейПочты	Истина
	//ИспользоватьДляОтправки	Истина
	//ИспользоватьЗащищенноеСоединениеДляВходящейПочты	Истина
	//ИспользоватьЗащищенноеСоединениеДляИсходящейПочты	Истина
	//Пользователь	BPS_1c
	//ПользовательSMTP	BPS_1c
	//ПортСервераВходящейПочты	995
	//ПортСервераИсходящейПочты	465
	//ПротоколВходящейПочты	POP
	//СерверВходящейПочты	pop.bk.ru
	//СерверИсходящейПочты	smtp.bk.ru
	//СпособPOP3Аутентификации	Обычная
	//СпособSMTPАутентификации	ПоУмолчанию
	//ТребуетсяВходНаСерверПередОтправкой	Истина
	//Пароль	56N352lQjsmX
	//ПарольSMTP	56N352lQjsmX	
КонецПроцедуры //ЗаполнитьСистемнаяУчетнаяЗаписьЭлектроннойПочты()

Функция ПолучитьРезультатЗапросаРС_бпсЗаблокированныеОбъекты(ДопПараметры) Экспорт 
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	бпсЗаблокированныеОбъекты.ОбъектБД
	|ИЗ
	|	РегистрСведений.бпсЗаблокированныеОбъекты КАК бпсЗаблокированныеОбъекты
	|ГДЕ
	|	бпсЗаблокированныеОбъекты.ОбъектБД = &ОбъектБД";
	
	Запрос.УстановитьПараметр("ОбъектБД", ДопПараметры.ОбъектБД);
	
	РезультатЗапроса = Запрос.Выполнить();
	Возврат РезультатЗапроса;	
КонецФункции //ПолучитьРезультатЗапросаРС_бпсЗаблокированныеОбъекты(ДопПараметрыЗаблокированныеОбъекты)

Процедура ПроверитьСтатусОбъектаСогласования(ДопПараметры) Экспорт 
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	бпсСтатусыСогласованийСрезПоследних.ОбъектБД,
		|	бпсСтатусыСогласованийСрезПоследних.ПредметСогласования,
		|	бпсСтатусыСогласованийСрезПоследних.Статус,
		|	бпсСтатусыСогласованийСрезПоследних.Основание
		|ИЗ
		|	РегистрСведений.бпсСтатусыОбъектов.СрезПоследних(
		|			,
		|			ОбъектБД = &ОбъектБД
		|				И ПредметСогласования = &ПредметСогласования) КАК бпсСтатусыСогласованийСрезПоследних";
	
	Запрос.УстановитьПараметр("ОбъектБД", ДопПараметры.ОбъектБД);
	Запрос.УстановитьПараметр("ПредметСогласования", ДопПараметры.ПредметСогласования);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	РезультатЗапроса = Запрос.Выполнить();
	Ожидаем.Что(РезультатЗапроса.Пустой(), "ПроверитьСтатусОбъектаСогласования РезультатЗапроса").ЭтоЛожь();
	Выборка = РезультатЗапроса.Выбрать();
	Ожидаем.Что(Выборка.Количество(),"ПроверитьСтатусОбъектаСогласования Выборка.Количество()").Равно(1);	
	
	Выборка.Следующий();

	Ожидаем.Что(Выборка.Статус,"ПроверитьСтатусОбъектаСогласования Выборка.Статус = "+ДопПараметры.ТребуемыйСтатус).Равно(ДопПараметры.ТребуемыйСтатус);
	Ожидаем.Что(Выборка.Основание,"ПроверитьСтатусОбъектаСогласования Выборка.Основание = "+ДопПараметры.ТребуемоеОснование).Равно(ДопПараметры.ТребуемоеОснование);
КонецПроцедуры

Функция ПолучитьРезультатЗапросаРС_бпсЗадачиПоБизнесПроцессам(ДопПараметры) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	бпсЗадачиПоБизнесПроцессам.ОбъектБД,
	|	бпсЗадачиПоБизнесПроцессам.ИсходныйБизнесПроцесс,
	|	бпсЗадачиПоБизнесПроцессам.Задача,
	|	бпсЗадачиПоБизнесПроцессам.Рецензия,
	|	бпсЗадачиПоБизнесПроцессам.Согласовано,
	|	бпсЗадачиПоБизнесПроцессам.ВыводитьВОтчет,
	|	бпсЗадачиПоБизнесПроцессам.Очередь
	|ИЗ
	|	РегистрСведений.бпсЗадачиПоБизнесПроцессам КАК бпсЗадачиПоБизнесПроцессам
	|ГДЕ
	|	бпсЗадачиПоБизнесПроцессам.ОбъектБД = &ОбъектБД
	|	И бпсЗадачиПоБизнесПроцессам.ИсходныйБизнесПроцесс = &ИсходныйБизнесПроцесс
	|	И бпсЗадачиПоБизнесПроцессам.Задача = &Задача";
	
	Запрос.УстановитьПараметр("Задача", ДопПараметры.Задача);
	Запрос.УстановитьПараметр("ИсходныйБизнесПроцесс", ДопПараметры.ИсходныйБизнесПроцесс);
	Запрос.УстановитьПараметр("ОбъектБД", ДопПараметры.ОбъектБД);
	
	РезультатЗапроса = Запрос.Выполнить();
	Возврат РезультатЗапроса;
	
КонецФункции

Функция ПолучитьЗадачу(ДопПараметры) Экспорт
	ЗадачаСсылка = Неопределено;
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	бпсЗадача.Ссылка
	|ИЗ
	|	Задача.бпсЗадача КАК бпсЗадача
	|ГДЕ
	|	бпсЗадача.БизнесПроцесс = &БизнесПроцессСсылка
	|	И бпсЗадача.РольАдресации = &РольАдресации
	|	И бпсЗадача.ПодразделениеАдресации = &ПодразделениеАдресации
	|	И НЕ бпсЗадача.Выполнена";
	
	Запрос.УстановитьПараметр("БизнесПроцессСсылка", ДопПараметры.БизнесПроцесс);
	Запрос.УстановитьПараметр("РольАдресации", ДопПараметры.РольАдресации);
	Запрос.УстановитьПараметр("ПодразделениеАдресации", ДопПараметры.ПодразделениеАдресации);
	
	РезультатЗапроса = Запрос.Выполнить();
	Ожидаем.Что(РезультатЗапроса.Пустой(), "РезультатЗапроса получить задачу").Не_().ЭтоИстина();
	Выборка = РезультатЗапроса.Выбрать();
	Ожидаем.Что(Выборка.Количество(),"Выборка.Количество() получить задачу").Равно(1);	
	Выборка.Следующий();
	ЗадачаСсылка = Выборка.Ссылка;
	Ожидаем.Что(ЗадачаСсылка,"ЗадачаСсылка").Существует();	
	Возврат ЗадачаСсылка;
КонецФункции //ПолучитьЗадачу(ДопПараметры)

Процедура ТестДолжен_СоздатьСправочник_бпсРолиАдресации() Экспорт  
	ТестовыеДанные = Загрузить_бпсРолиАдресации();
	Проверить_бпсРолиАдресации(ТестовыеДанные);
КонецПроцедуры //ТестДолжен_СоздатьСправочник_бпсРолиАдресации()

Процедура ТестДолжен_СоздатьСправочник_бпсПодразделенияАдресации() Экспорт
	ТестовыеДанные = Загрузить_бпсПодразделенияАдресации();
	Проверить_бпсПодразделенияАдресации(ТестовыеДанные);
КонецПроцедуры //ТестДолжен_СоздатьСправочник_бпсПодразделенияАдресации

Процедура ТестДолжен_СоздатьСправочник_бпсПредметыСогласований() Экспорт
	ТестовыеДанныебпсТипыОбъектовБД = Загрузить_бпсТипыОбъектовБД();
	ТестовыеДанныебпсУсловия = Создать_бпсУсловия(ТестовыеДанныебпсТипыОбъектовБД);	
	ТестовыеДанныеРолиАдресации = Загрузить_бпсРолиАдресации();
	ТестовыеДанныеПодразделенияАдресации = Загрузить_бпсПодразделенияАдресации();
	
	ТестовыеДанныебпсПредметыСогласований = Загрузить_бпсПредметыСогласований();
	Проверить_бпсПредметыСогласований(ТестовыеДанныебпсПредметыСогласований);
КонецПроцедуры //ТестДолжен_СоздатьСправочник_бпсПодразделенияАдресации

Функция Загрузить_бпсПредметыСогласований()
	Макет = ПолучитьМакет("Справочник_бпсПредметыСогласований"); //использую макет из этой же внешней обработки
	ТестовыеДанные = ГенераторТестовыхДанных.СоздатьДанныеПоТабличномуДокументу(Макет);	
	
	Возврат ТестовыеДанные;
КонецФункции

Процедура Проверить_бпсПредметыСогласований(ТестовыеДанные) Экспорт
	Ожидаем.Что(ТестовыеДанные, "ЭтоСтруктура").ИмеетТип("Структура");
	Ожидаем.Что(ТестовыеДанные.Количество(),"ТестовыеДанные.Количество()").Равно(1);
	Ожидаем.Что(ТестовыеДанные.Свойство("ПредметСогласования_Договор"),"Ожидали, что есть переменная 'ПредметСогласования_Договор'").ЭтоИстина();
	Ожидаем.Что(ТестовыеДанные.ПредметСогласования_Договор,"СправочникСсылка.бпсПредметыСогласований").ИмеетТип(Тип("СправочникСсылка.бпсПредметыСогласований"));
	Ожидаем.Что(ТестовыеДанные.ПредметСогласования_Договор.ТипОбъектаБД,"ПредметСогласования_Договор.ТипОбъектаБД").Заполнено();
	Ожидаем.Что(ТестовыеДанные.ПредметСогласования_Договор.УпрощеннаяСистемаУведомлений,"УпрощеннаяСистемаУведомлений = Истина").ЭтоИстина();
	Ожидаем.Что(ТестовыеДанные.ПредметСогласования_Договор.УведомитьИнициатораОЗавершении,"УведомитьИнициатораОЗавершении = Истина").ЭтоИстина();
	Ожидаем.Что(ТестовыеДанные.ПредметСогласования_Договор.РазрешеноПовторноеСогласование,"РазрешеноПовторноеСогласование = Истина").ЭтоИстина();
	
	Ожидаем.Что(ТестовыеДанные.ПредметСогласования_Договор.Наименование,"Наименование = Согласование договора").Равно("Согласование договора");
	
	ОпределениеЛистаСогласования = ТестовыеДанные.ПредметСогласования_Договор.ОпределениеЛистаСогласования;
	Ожидаем.Что(ОпределениеЛистаСогласования.Количество(),"ОпределениеЛистаСогласования.Количество()").Равно(3);
	
	СтрокаОпределениеЛистаСогласования = ОпределениеЛистаСогласования[0];
	Ожидаем.Что(СтрокаОпределениеЛистаСогласования.КлючСтроки,"СтрокаОпределениеЛистаСогласования.КлючСтроки").Равно(1);
	Ожидаем.Что(СтрокаОпределениеЛистаСогласования.РольАдресации,"СтрокаОпределениеЛистаСогласования.РольАдресации").Заполнено();
	Ожидаем.Что(СтрокаОпределениеЛистаСогласования.РольАдресации.Наименование,"Наименование = Юрист").Равно("Юрист");
	Ожидаем.Что(СтрокаОпределениеЛистаСогласования.ПодразделениеАдресации.Наименование,"Наименование = Хабаровск").Равно("Хабаровск");
	
	Действия = ТестовыеДанные.ПредметСогласования_Договор.Действия;
	Ожидаем.Что(Действия.Количество(),"Действия.Количество()").Равно(2);
КонецПроцедуры //Проверить_бпсПредметыСогласований(ТестовыеДанные)

Функция Загрузить_бпсПодразделенияАдресации()
	Макет = ПолучитьМакет("Справочник_бпсПодразделенияАдресации"); //использую макет из этой же внешней обработки
	ТестовыеДанные = ГенераторТестовыхДанных.СоздатьДанныеПоТабличномуДокументу(Макет);	
	
	Возврат ТестовыеДанные;
КонецФункции

Процедура Проверить_бпсПодразделенияАдресации(ТестовыеДанные) Экспорт
	Ожидаем.Что(ТестовыеДанные, "ЭтоСтруктура").ИмеетТип("Структура");
	Ожидаем.Что(ТестовыеДанные.Количество(),"ТестовыеДанные.Количество()").Равно(4);
	Ожидаем.Что(ТестовыеДанные.Свойство("Подразделение_Хабаровск"),"Ожидали, что есть переменная 'Подразделение_Хабаровск'").ЭтоИстина();
	Ожидаем.Что(ТестовыеДанные.Подразделение_Хабаровск,"СправочникСсылка.бпсПодразделенияАдресации").ИмеетТип(Тип("СправочникСсылка.бпсПодразделенияАдресации"));
	Ожидаем.Что(ТестовыеДанные.Подразделение_Хабаровск.Наименование,"Наименование = Хабаровск").Равно("Хабаровск");	
КонецПроцедуры //Проверить_бпсПодразделенияАдресации

Функция Загрузить_бпсРолиАдресации()
	Макет = ПолучитьМакет("Справочник_бпсРолиАдресации"); //использую макет из этой же внешней обработки
	ТестовыеДанные = ГенераторТестовыхДанных.СоздатьДанныеПоТабличномуДокументу(Макет);	
	
	Возврат ТестовыеДанные;
КонецФункции

Процедура Проверить_бпсРолиАдресации(ТестовыеДанные) Экспорт
	Ожидаем.Что(ТестовыеДанные, "ЭтоСтруктура").ИмеетТип("Структура");
	Ожидаем.Что(ТестовыеДанные.Количество(),"ТестовыеДанные.Количество()").Равно(3);
	Ожидаем.Что(ТестовыеДанные.Свойство("Роль_Юрист"),"Ожидали, что есть переменная 'Роль_Юрист'").ЭтоИстина();
	Ожидаем.Что(ТестовыеДанные.Роль_Юрист,"СправочникСсылка.бпсРолиАдресации").ИмеетТип(Тип("СправочникСсылка.бпсРолиАдресации"));
	Ожидаем.Что(ТестовыеДанные.Роль_Юрист.Наименование,"Наименование = Юрист").Равно("Юрист");
КонецПроцедуры //Проверить_бпсРолиАдресации()

Функция СоздатьМаршрутСогласования_Подразделение(ПредметСогласования_Подразделение) Экспорт
	СпрОбъект = Справочники.бпсМаршрутыСогласований.СоздатьЭлемент();
	СпрОбъект.Наименование = "Согласование подразделения Маршрут";
	СпрОбъект.ОбъектБДСиноним = ПредметСогласования_Подразделение.ОбъектБДСиноним; 
	СпрОбъект.ОбъектБДИмяМетаданных = ПредметСогласования_Подразделение.ОбъектБДИмяМетаданных;
	СпрОбъект.АвтоматическиСтартоватьСледующееСогласование = Истина;
	
	Очередь = 1;
	
	СтрокаМаршрут = СпрОбъект.Маршрут.Добавить();
	СтрокаМаршрут.Очередь = Очередь;
	СтрокаМаршрут.ПредметСогласования = ПредметСогласования_Подразделение;
	
	СпрОбъект.Записать();
	Возврат СпрОбъект.Ссылка;
КонецФункции

Процедура ДобавитьЗаписьВРегистрАдресации_ОсновнаяРольВсяФирма() Экспорт
	РолиАдресации_ОсновнаяРоль = Справочники.бпсРолиАдресации.ОсновнаяРоль;
	ПодразделенияАдресации_ВсяФирма = Справочники.бпсПодразделенияАдресации.ВсяФирма;
	
	
	НаборЗаписей=РегистрыСведений.бпсРегистрАдресации.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Пользователь.Установить(ПараметрыСеанса.ТекущийПользователь);
	НаборЗаписей.Отбор.РольАдресации.Установить(РолиАдресации_ОсновнаяРоль);
	НаборЗаписей.Отбор.ПодразделениеАдресации.Установить(ПодразделенияАдресации_ВсяФирма);
	Запись=НаборЗаписей.Добавить();
	Запись.Пользователь=ПараметрыСеанса.ТекущийПользователь;
	Запись.РольАдресации=РолиАдресации_ОсновнаяРоль;
	Запись.ПодразделениеАдресации=ПодразделенияАдресации_ВсяФирма;
	НаборЗаписей.Записать();

	НаборЗаписей.Прочитать();
	ТекстТеста = "";
	Ожидаем.Что(НаборЗаписей.Количество(),ТекстТеста).Равно(1);
КонецПроцедуры //ДобавитьЗаписьВРегистрАдресации_ОсновнаяРольВсяФирма()

Функция СоздатьПредметСогласования_Подразделение() Экспорт
	ТестовыеДанныебпсТипыОбъектовБД = Загрузить_бпсТипыОбъектовБД();	
	пОбъектБД = Справочники.бпсПодразделенияАдресации.ВсяФирма;
	
	ПредметСогласованияОбъект = Справочники.бпсПредметыСогласований.СоздатьЭлемент();
	ПредметСогласованияОбъект.Наименование = "Согласуем подразделение";
	
	ОбъектБД_Метаданные = пОбъектБД.Метаданные();
	ПредметСогласованияОбъект.ТипОбъектаБД = ТестовыеДанныебпсТипыОбъектовБД.ТипОбъекта_0;
	ПредметСогласованияОбъект.Заполнить(Неопределено);
	
	Ожидаем.Что(ПредметСогласованияОбъект.УпрощеннаяСистемаУведомлений,"УпрощеннаяСистемаУведомлений = Истина").ЭтоИстина();
	Ожидаем.Что(ПредметСогласованияОбъект.УведомитьИнициатораОЗавершении,"УведомитьИнициатораОЗавершении = Истина").ЭтоИстина();
	Ожидаем.Что(ПредметСогласованияОбъект.РазрешеноПовторноеСогласование,"РазрешеноПовторноеСогласование = Ложь").Не_().ЭтоИстина();
	Ожидаем.Что(ПредметСогласованияОбъект.Действия.Количество(),"Действия.Количество() = 2").Равно(2);
	
	
	СтрокаОпределениеЛистаСогласования = ПредметСогласованияОбъект.ОпределениеЛистаСогласования.Добавить();
	СтрокаОпределениеЛистаСогласования.КлючСтроки = ПредметСогласованияОбъект.ПолучитьНовыйКлючСтроки();
	Ожидаем.Что(СтрокаОпределениеЛистаСогласования.КлючСтроки,"Ключ строки = 1").Равно(1);

	СтрокаОпределениеЛистаСогласования.ПодразделениеАдресации = Справочники.бпсПодразделенияАдресации.ВсяФирма;
	СтрокаОпределениеЛистаСогласования.РольАдресации = Справочники.бпсРолиАдресации.ОсновнаяРоль;
	
	ПредметСогласованияОбъект.Записать();
	пПредметСогласования = ПредметСогласованияОбъект.Ссылка;
	
	ТекстТеста = "Создали предмет согласования [Согласуем подразделение]";
	Ожидаем.Что(пПредметСогласования,ТекстТеста).Существует();

	Возврат пПредметСогласования;	
КонецФункции

Процедура ПередЗапускомТеста() Экспорт
	НачатьТранзакцию();
КонецПроцедуры

Процедура ПослеЗапускаТеста() Экспорт
	Если ТранзакцияАктивна() Тогда
		ОтменитьТранзакцию();
	КонецЕсли;
КонецПроцедуры
