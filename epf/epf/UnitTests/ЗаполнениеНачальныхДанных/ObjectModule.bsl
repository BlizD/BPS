Перем КонтекстЯдра;
Перем Утверждения;
Перем ГенераторТестовыхДанных;
Перем УтвержденияПроверкаТаблиц;
Перем Ожидаем;
Перем СериализаторMXL;

Процедура Инициализация(КонтекстЯдраПараметр) Экспорт
    КонтекстЯдра = КонтекстЯдраПараметр;
    //Утверждения = КонтекстЯдра.Плагин("БазовыеУтверждения");
	Ожидаем = КонтекстЯдра.Плагин("УтвержденияBDD");
    ГенераторТестовыхДанных = КонтекстЯдра.Плагин("СериализаторMXL");
    //УтвержденияПроверкаТаблиц = КонтекстЯдра.Плагин("УтвержденияПроверкаТаблиц");
КонецПроцедуры

Процедура ЗаполнитьНаборТестов(НаборТестов) Экспорт
	
	НаборТестов.Добавить("ТестДолжен_ЗаполнитьНачальныеДанные");
	//НаборТестов.Добавить("ТестДолжен_СоздатьПользователяАдминистратора");
КонецПроцедуры

Процедура ТестДолжен_СоздатьПользователяАдминистратора() Экспорт
	Макет = ПолучитьМакет("ПользовательАдминистратор"); 
	ТестовыеДанные = ГенераторТестовыхДанных.СоздатьДанныеПоТабличномуДокументу(Макет);	
	Ожидаем.Что(ТестовыеДанные.Администратор,"ТестовыеДанные.Администратор").Существует();
	
КонецПроцедуры 

Процедура ТестДолжен_ЗаполнитьНачальныеДанные() Экспорт
	НачатьТранзакцию();	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	бпсПредметыСогласований.Ссылка
	|ИЗ
	|	Справочник.бпсПредметыСогласований КАК бпсПредметыСогласований";
	
	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		Сообщить("Начальные данные уже заполнены. Повторное заполнение не требуется");
		Возврат;
	Конецесли;

	Макет = ПолучитьМакет("НачальныеДанные"); 
	ТестовыеДанные = ГенераторТестовыхДанных.СоздатьДанныеПоТабличномуДокументу(Макет);	
	ТестовыеДанные.Вставить("Администратор",Справочники.Пользователи.НайтиПоКоду("Администратор"));
	Ожидаем.Что(ТестовыеДанные.Администратор,"ТестовыеДанные.Администратор").Существует();
	Ожидаем.Что(ТестовыеДанные.СистемнаяУчетнаяЗапись,"ТестовыеДанные.СистемнаяУчетнаяЗапись").Существует();
	Ожидаем.Что(ТестовыеДанные.Объект_ДоговорыКонтрагентов_,"ТестовыеДанные.Объект_ДоговорыКонтрагентов_").Существует();
	
	//СоздатьПользователяИБ(ТестовыеДанные.Администратор);
	СоздатьУсловия(ТестовыеДанные.Объект_ДоговорыКонтрагентов_);
	
	Макет = ПолучитьМакет("НачальныеДанныеЧасть2"); 
	ТестовыеДанныеЧасть2 = ГенераторТестовыхДанных.СоздатьДанныеПоТабличномуДокументу(Макет);	
		
	ЗафиксироватьТранзакцию();
КонецПроцедуры //ТестДолжен_СоздатьСправочник_бпсТипыОбъектовБД

Процедура СоздатьПользователяИБ(пПользователь)
	ПользовательИБ = ПользователиИнформационнойБазы.СоздатьПользователя();
	ПользовательИБ.АутентификацияСтандартная = Истина;
	ПользовательИБ.Имя = пПользователь;
	ПользовательИБ.ПоказыватьВСпискеВыбора = Истина;
	Для каждого Роль из Метаданные.Роли цикл
		ПользовательИБ.Роли.Добавить(Роль);		
	Конеццикла;
	ПользовательИБ.Записать(); 
КонецПроцедуры 

Процедура СоздатьУсловия(ТипОбъекта)
	
	ПолеКомпоновкиДанных = Новый ПолеКомпоновкиДанных("СуммаДоговора");	
	СоздатьУсловие(ТипОбъекта,ПолеКомпоновкиДанных,ВидСравненияКомпоновкиДанных.БольшеИлиРавно,10000);
	СоздатьУсловие(ТипОбъекта,ПолеКомпоновкиДанных,ВидСравненияКомпоновкиДанных.БольшеИлиРавно,100000);
	СоздатьУсловие(ТипОбъекта,ПолеКомпоновкиДанных,ВидСравненияКомпоновкиДанных.БольшеИлиРавно,150000);
	
	ПолеКомпоновкиДанных = Новый ПолеКомпоновкиДанных("УсловныеЕдиницы");	
	СоздатьУсловие(ТипОбъекта,ПолеКомпоновкиДанных,ВидСравненияКомпоновкиДанных.Равно,Истина);
	
	СпрОбъект = Справочники.бпсУсловия.СоздатьЭлемент();
	СпрОбъект.Владелец = ТипОбъекта; 
	СпрОбъект.ПроизвольноеУсловие = Истина;
	СпрОбъект.Наименование = "ПометкаУдаления = Истина";
	СпрОбъект.ТекстПроизвольногоУсловия = "Результат = ОбъектБД.ПометкаУдаления = Истина";
	СпрОбъект.Записать();		
КонецПроцедуры 

Процедура СоздатьУсловие(ТипОбъекта,ПолеКомпоновкиДанных,ВидСравненияКД,ПравоеЗначение)
	СпрОбъект = Справочники.бпсУсловия.СоздатьЭлемент();
	СпрОбъект.Владелец = ТипОбъекта; 
	пНастройкиКомпоновщика = СпрОбъект.НастройкиКомпоновщикаХранилище.Получить();	
	КомпоновщикНастроекКомпоновкиДанных = ПолучитьКомпоновщикНастроекКомпоновкиДанных(СпрОбъект,пНастройкиКомпоновщика);	
	
	ЭлементыОтбора = КомпоновщикНастроекКомпоновкиДанных.Настройки.Отбор.Элементы;
	
	ЭлементОтбора = ЭлементыОтбора.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));	
	ЭлементОтбора.Использование = Истина;
	ЭлементОтбора.ЛевоеЗначение = ПолеКомпоновкиДанных;
	ЭлементОтбора.ВидСравнения = ВидСравненияКД;
	ЭлементОтбора.ПравоеЗначение = ПравоеЗначение;	
	
	СпрОбъект.Наименование = "" + КомпоновщикНастроекКомпоновкиДанных.Настройки.Отбор;
	СпрОбъект.АдресВременногоХранилища = ПоместитьВоВременноеХранилище(КомпоновщикНастроекКомпоновкиДанных.Настройки,Новый УникальныйИдентификатор());	
	СпрОбъект.Записать();
КонецПроцедуры 

Функция ПолучитьКомпоновщикНастроекКомпоновкиДанных(СпрОбъект,пНастройкиКомпоновщика = Неопределено) Экспорт
	КомпоновщикНастроекКомпоновкиДанных = Новый КомпоновщикНастроекКомпоновкиДанных;
	МакетСКД = Справочники.бпсУсловия.ПолучитьМакетСКДДляТипаОбъектаБД(СпрОбъект.Владелец);
	
	АдресВременногоХранилищаМакетаСКД = ПоместитьВоВременноеХранилище(МакетСКД,Новый УникальныйИдентификатор());	
	
	ИсточникНастроек = Новый ИсточникДоступныхНастроекКомпоновкиДанных(АдресВременногоХранилищаМакетаСКД);
	КомпоновщикНастроекКомпоновкиДанных.Инициализировать(ИсточникНастроек);
	
	Если пНастройкиКомпоновщика = Неопределено Тогда
		КомпоновщикНастроекКомпоновкиДанных.ЗагрузитьНастройки(МакетСКД.НастройкиПоУмолчанию);
	Иначе
		КомпоновщикНастроекКомпоновкиДанных.ЗагрузитьНастройки(пНастройкиКомпоновщика);
	Конецесли;
	Возврат КомпоновщикНастроекКомпоновкиДанных;
КонецФункции
